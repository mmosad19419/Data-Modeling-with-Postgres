<!doctype html><html lang="en"><head><link rel="apple-touch-icon-precomposed" sizes="57x57" href="/campus/apple-touch-icon-57x57.png"><link rel="apple-touch-icon-precomposed" sizes="114x114" href="/campus/apple-touch-icon-114x114.png"><link rel="apple-touch-icon-precomposed" sizes="72x72" href="/campus/apple-touch-icon-72x72.png"><link rel="apple-touch-icon-precomposed" sizes="144x144" href="/campus/apple-touch-icon-144x144.png"><link rel="apple-touch-icon-precomposed" sizes="60x60" href="/campus/apple-touch-icon-60x60.png"><link rel="apple-touch-icon-precomposed" sizes="120x120" href="/campus/apple-touch-icon-120x120.png"><link rel="apple-touch-icon-precomposed" sizes="76x76" href="/campus/apple-touch-icon-76x76.png"><link rel="apple-touch-icon-precomposed" sizes="152x152" href="/campus/apple-touch-icon-152x152.png"><link rel="icon" type="image/png" href="/campus/favicon.ico"><link rel="icon" type="image/png" href="/campus/favicon-196x196.png" sizes="196x196"><link rel="icon" type="image/png" href="/campus/favicon-96x96.png" sizes="96x96"><link rel="icon" type="image/png" href="/campus/favicon-32x32.png" sizes="32x32"><link rel="icon" type="image/png" href="/campus/favicon-16x16.png" sizes="16x16"><link rel="icon" type="image/png" href="/campus/favicon-128.png" sizes="128x128"><meta name="application-name" content="DataCamp"><meta name="msapplication-TileColor" content="#FFFFFF"><meta name="msapplication-TileImage" content="/campus/mstile-144x144.png"><meta name="msapplication-square70x70logo" content="/campus/mstile-70x70.png"><meta name="msapplication-square150x150logo" content="/campus/mstile-150x150.png"><meta name="msapplication-wide310x150logo" content="/campus/mstile-310x150.png"><meta name="msapplication-square310x310logo" content="/campus/mstile-310x310.png"><link href="/campus/static/css/16.279a2d9e.chunk.css" rel="stylesheet"><link href="/campus/static/css/main.88385ec5.chunk.css" rel="stylesheet"><title data-react-helmet="true">Grouping and Aggregating II | Python</title><meta data-react-helmet="true" charset="utf-8"><meta data-react-helmet="true" http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta data-react-helmet="true" name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"><meta data-react-helmet="true" name="fragment" content="!"><meta data-react-helmet="true" name="keywords" content="R, Python, Data analysis, interactive, learning"><meta data-react-helmet="true" name="description" content="Here is an example of Grouping and Aggregating II: In addition to the GroupedData methods you&apos;ve already seen, there is also the ."><meta data-react-helmet="true" name="twitter:card" content="summary"><meta data-react-helmet="true" name="twitter:site" content="@DataCamp"><meta data-react-helmet="true" name="twitter:title" content="Grouping and Aggregating II | Python"><meta data-react-helmet="true" name="twitter:description" content="Here is an example of Grouping and Aggregating II: In addition to the GroupedData methods you&apos;ve already seen, there is also the ."><meta data-react-helmet="true" name="twitter:creator" content="@DataCamp"><meta data-react-helmet="true" name="twitter:image:src" content="/public/assets/images/var/twitter_share.png"><meta data-react-helmet="true" name="twitter:domain" content="www.datacamp.com"><meta data-react-helmet="true" property="og:title" content="Grouping and Aggregating II | Python"><meta data-react-helmet="true" property="og:image" content="/public/assets/images/var/linkedin_share.png"><meta data-react-helmet="true" name="google-signin-clientid" content="892114885437-01a7plbsu1b2vobuhvnckmmanhb58h3a.apps.googleusercontent.com"><meta data-react-helmet="true" name="google-signin-scope" content="email profile"><meta data-react-helmet="true" name="google-signin-cookiepolicy" content="single_host_origin"></head><body><script>window.PRELOADED_STATE = "[&quot;~#iR&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;StateRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;backendSession&quot;,[&quot;~#iOM&quot;,[&quot;status&quot;,[&quot;^2&quot;,[&quot;code&quot;,&quot;none&quot;,&quot;text&quot;,&quot;&quot;]],&quot;isInitSession&quot;,false,&quot;message&quot;,null]],&quot;boot&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;BootStateRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;bootState&quot;,&quot;PRE_BOOTED&quot;,&quot;error&quot;,null]]],&quot;chapter&quot;,[&quot;^2&quot;,[&quot;current&quot;,[&quot;^2&quot;,[&quot;badge_uncompleted_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;number&quot;,2,&quot;number_of_videos&quot;,0,&quot;slug&quot;,&quot;manipulating-data-2&quot;,&quot;last_updated_on&quot;,&quot;27/04/2022&quot;,&quot;title_meta&quot;,null,&quot;nb_exercises&quot;,12,&quot;free_preview&quot;,null,&quot;slides_link&quot;,null,&quot;title&quot;,&quot;Manipulating data&quot;,&quot;xp&quot;,1050,&quot;id&quot;,13844,&quot;exercises&quot;,[&quot;~#iL&quot;,[[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Creating columns&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=1&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;SQL in a nutshell&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=2&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;SQL in a nutshell (2)&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=3&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Filtering Data&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=4&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Selecting&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=5&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Selecting II&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=6&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Aggregating&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=7&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Aggregating II&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=8&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Grouping and Aggregating I&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=9&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Grouping and Aggregating II&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,10,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=10&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Joining&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,11,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=11&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Joining II&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,12,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=12&quot;]]]],&quot;description&quot;,&quot;In this chapter, you&#39;ll learn about the pyspark.sql module, which provides optimized data queries to your Spark session.&quot;,&quot;badge_completed_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;]]]],&quot;contentAuthorization&quot;,[&quot;^ &quot;],&quot;course&quot;,[&quot;^2&quot;,[&quot;difficulty_level&quot;,1,&quot;reduced_outline&quot;,null,&quot;marketing_video&quot;,&quot;&quot;,&quot;active_image&quot;,&quot;course-4452-master:132491337cf65090139a1c4d9a807533-20220427091410144&quot;,&quot;mobile_enabled&quot;,null,&quot;author_field&quot;,null,&quot;chapters&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;badge_uncompleted_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;number&quot;,1,&quot;number_of_videos&quot;,0,&quot;slug&quot;,&quot;getting-to-know-pyspark&quot;,&quot;last_updated_on&quot;,&quot;27/04/2022&quot;,&quot;title_meta&quot;,null,&quot;nb_exercises&quot;,10,&quot;free_preview&quot;,true,&quot;slides_link&quot;,null,&quot;title&quot;,&quot;Getting to know PySpark&quot;,&quot;xp&quot;,850,&quot;id&quot;,13843,&quot;exercises&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;What is Spark, anyway?&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=1&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Using Spark in Python&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=2&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Examining The SparkContext&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=3&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Using DataFrames&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=4&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Creating a SparkSession&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=5&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Viewing tables&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=6&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Are you query-ious?&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=7&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Pandafy a Spark DataFrame&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=8&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Put some Spark in your data&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=9&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Dropping the middle man&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,10,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=10&quot;]]]],&quot;description&quot;,&quot;In this chapter, you&#39;ll learn how Spark manages data and how can you read and write tables from Python.&quot;,&quot;badge_completed_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;]],[&quot;^2&quot;,[&quot;badge_uncompleted_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;number&quot;,2,&quot;number_of_videos&quot;,0,&quot;slug&quot;,&quot;manipulating-data-2&quot;,&quot;last_updated_on&quot;,&quot;27/04/2022&quot;,&quot;title_meta&quot;,null,&quot;nb_exercises&quot;,12,&quot;free_preview&quot;,null,&quot;slides_link&quot;,null,&quot;title&quot;,&quot;Manipulating data&quot;,&quot;xp&quot;,1050,&quot;id&quot;,13844,&quot;exercises&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Creating columns&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=1&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;SQL in a nutshell&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=2&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;SQL in a nutshell (2)&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=3&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Filtering Data&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=4&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Selecting&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=5&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Selecting II&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=6&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Aggregating&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=7&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Aggregating II&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=8&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Grouping and Aggregating I&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=9&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Grouping and Aggregating II&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,10,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=10&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Joining&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,11,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=11&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Joining II&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,12,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=12&quot;]]]],&quot;description&quot;,&quot;In this chapter, you&#39;ll learn about the pyspark.sql module, which provides optimized data queries to your Spark session.&quot;,&quot;badge_completed_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;]],[&quot;^2&quot;,[&quot;badge_uncompleted_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;number&quot;,3,&quot;number_of_videos&quot;,0,&quot;slug&quot;,&quot;getting-started-with-machine-learning-pipelines&quot;,&quot;last_updated_on&quot;,&quot;27/04/2022&quot;,&quot;title_meta&quot;,null,&quot;nb_exercises&quot;,14,&quot;free_preview&quot;,null,&quot;slides_link&quot;,null,&quot;title&quot;,&quot;Getting started with machine learning pipelines&quot;,&quot;xp&quot;,1200,&quot;id&quot;,13845,&quot;exercises&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Machine Learning Pipelines&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=1&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Join the DataFrames&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=2&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Data types&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=3&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;String to integer&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=4&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Create a new column&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=5&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Making a Boolean&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=6&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Strings and factors&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=7&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Carrier&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=8&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Destination&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=9&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Assemble a vector&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,10,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=10&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Create the pipeline&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,11,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=11&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Test vs. Train&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,12,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=12&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Transform the data&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,13,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=13&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Split the data&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,14,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=14&quot;]]]],&quot;description&quot;,&quot;PySpark has built-in, cutting-edge machine learning routines, along with utilities to create full machine learning pipelines. You&#39;ll learn about them in this chapter.&quot;,&quot;badge_completed_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;]],[&quot;^2&quot;,[&quot;badge_uncompleted_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;number&quot;,4,&quot;number_of_videos&quot;,0,&quot;slug&quot;,&quot;model-tuning-and-selection&quot;,&quot;last_updated_on&quot;,&quot;27/04/2022&quot;,&quot;title_meta&quot;,null,&quot;nb_exercises&quot;,9,&quot;free_preview&quot;,null,&quot;slides_link&quot;,null,&quot;title&quot;,&quot;Model tuning and selection&quot;,&quot;xp&quot;,750,&quot;id&quot;,13846,&quot;exercises&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;What is logistic regression?&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=1&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Create the modeler&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=2&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Cross validation&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=3&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Create the evaluator&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=4&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Make a grid&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=5&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Make the validator&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=6&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Fit the model(s)&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=7&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;title&quot;,&quot;Evaluating binary classifiers&quot;,&quot;aggregate_xp&quot;,50,&quot;number&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=8&quot;]],[&quot;^2&quot;,[&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;title&quot;,&quot;Evaluate the model&quot;,&quot;aggregate_xp&quot;,100,&quot;number&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=9&quot;]]]],&quot;description&quot;,&quot;In this last chapter, you&#39;ll apply what you&#39;ve learned to create a model that predicts which flights will be delayed.&quot;,&quot;badge_completed_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;]]]],&quot;time_needed&quot;,null,&quot;author_image&quot;,&quot;placeholder.png&quot;,&quot;tracks&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;path&quot;,&quot;/tracks/big-data-with-pyspark&quot;,&quot;title_with_subtitle&quot;,&quot;Big Data with PySpark&quot;]],[&quot;^2&quot;,[&quot;path&quot;,&quot;/tracks/data-engineer-with-python&quot;,&quot;title_with_subtitle&quot;,&quot;Data Engineer with Python&quot;]],[&quot;^2&quot;,[&quot;path&quot;,&quot;/tracks/machine-learning-scientist-with-python&quot;,&quot;title_with_subtitle&quot;,&quot;Machine Learning Scientist with Python&quot;]]]],&quot;runtime_config&quot;,&quot;spark&quot;,&quot;lti_only&quot;,false,&quot;image_url&quot;,&quot;https://assets.datacamp.com/production/course_4452/shields/thumb/shield_image_course_4452_20191230-1-6e9bmp?1577742310&quot;,&quot;topic_id&quot;,10,&quot;slug&quot;,&quot;introduction-to-pyspark&quot;,&quot;last_updated_on&quot;,&quot;13/01/2023&quot;,&quot;paid&quot;,true,&quot;collaborators&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;avatar_url&quot;,&quot;https://assets.datacamp.com/users/avatars/000/830/418/square/gccolin.jpeg?1648299562&quot;,&quot;full_name&quot;,&quot;Colin Ricardo&quot;]]]],&quot;difficulty_level_hardcoded&quot;,null,&quot;time_needed_in_hours&quot;,4,&quot;technology_id&quot;,2,&quot;university&quot;,null,&quot;archived_at&quot;,null,&quot;state&quot;,&quot;live&quot;,&quot;author_bio&quot;,null,&quot;should_cache&quot;,true,&quot;sharing_links&quot;,[&quot;^2&quot;,[&quot;twitter&quot;,&quot;http://bit.ly/1eWTMJh&quot;,&quot;facebook&quot;,&quot;http://bit.ly/1iS42Do&quot;]],&quot;instructors&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;id&quot;,310314,&quot;marketing_biography&quot;,&quot;Director of Data Science Education at Flatiron School&quot;,&quot;biography&quot;,&quot;Lore is a data scientist with expertise in applied finance. She obtained her PhD in Business Economics and Statistics at KU Leuven, Belgium. During her PhD, she collaborated with several banks working on advanced methods for the analysis of credit risk data. Lore formerly worked as a Data Science Curriculum Lead at DataCamp, and is and is now Director of Data Science Education at Flatiron School, a coding school with branches in 8 cities and online programs.&quot;,&quot;avatar_url&quot;,&quot;https://assets.datacamp.com/users/avatars/000/310/314/square/loreaboutpic.jpg?1493154524&quot;,&quot;full_name&quot;,&quot;Lore Dirick&quot;,&quot;instructor_path&quot;,&quot;/instructors/lore&quot;]],[&quot;^2&quot;,[&quot;id&quot;,268605,&quot;marketing_biography&quot;,&quot;Data Scientist&quot;,&quot;biography&quot;,&quot;Nick has a degree in mathematics with a concentration in statistics from Reed College. He&#39;s worked on many data science projects in the past, doing everything from mapping crime data to developing new kinds of models for social networks. He&#39;s currently a data scientist in the New York City area.&quot;,&quot;avatar_url&quot;,&quot;https://assets.datacamp.com/users/avatars/000/268/605/square/20202701_-_Nick_Solomon.jpeg?1538221795&quot;,&quot;full_name&quot;,&quot;Nick Solomon&quot;,&quot;instructor_path&quot;,&quot;/instructors/nicksolomon10&quot;]]]],&quot;seo_title&quot;,&quot;Introduction to PySpark&quot;,&quot;title&quot;,&quot;Introduction to PySpark&quot;,&quot;xp&quot;,3850,&quot;image_thumbnail_url&quot;,&quot;https://assets.datacamp.com/production/course_4452/shields/thumb_home/shield_image_course_4452_20191230-1-6e9bmp?1577742310&quot;,&quot;short_description&quot;,&quot;Learn to implement distributed data management and machine learning in Spark using the PySpark package.&quot;,&quot;nb_of_subscriptions&quot;,108420,&quot;long_description&quot;,null,&quot;seo_description&quot;,&quot;Learn to wrangle data and build a machine learning pipeline to make predictions with  PySpark Python package. Practice your skills with real-world data.&quot;,&quot;type&quot;,&quot;datacamp&quot;,&quot;link&quot;,&quot;https://www.datacamp.com/courses/introduction-to-pyspark&quot;,&quot;case_study&quot;,null,&quot;id&quot;,4452,&quot;datasets&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;asset_url&quot;,&quot;https://assets.datacamp.com/production/repositories/1237/datasets/6e5c4ac2a4799338ba7e13d54ce1fa918da644ba/airports.csv&quot;,&quot;name&quot;,&quot;Airports&quot;]],[&quot;^2&quot;,[&quot;asset_url&quot;,&quot;https://assets.datacamp.com/production/repositories/1237/datasets/fa47bb54e83abd422831cbd4f441bd30fd18bd15/flights_small.csv&quot;,&quot;name&quot;,&quot;Flights&quot;]],[&quot;^2&quot;,[&quot;asset_url&quot;,&quot;https://assets.datacamp.com/production/repositories/1237/datasets/231480a2696c55fde829ce76d936596123f12c0c/planes.csv&quot;,&quot;name&quot;,&quot;Planes&quot;]]]],&quot;description&quot;,&quot;In this course, you&#39;ll learn how to use Spark from Python! Spark is a tool for doing parallel computation with large datasets and it integrates well with Python. PySpark is the Python package that makes the magic happen. You&#39;ll use this package to work with data about flights from Portland and Seattle. You&#39;ll learn to wrangle this data and build a whole machine learning pipeline to predict whether or not flights will be delayed. Get ready to put some Spark in your Python code and dive into the world of high-performance machine learning!&quot;,&quot;prerequisites&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;path&quot;,&quot;/courses/intro-to-python-for-data-science&quot;,&quot;title&quot;,&quot;Introduction to Python&quot;]]]],&quot;original_image_url&quot;,&quot;https://assets.datacamp.com/production/course_4452/shields/original/shield_image_course_4452_20191230-1-6e9bmp?1577742310&quot;,&quot;programming_language&quot;,&quot;python&quot;,&quot;external_slug&quot;,&quot;introduction-to-pyspark&quot;]],&quot;exercises&quot;,[&quot;^2&quot;,[&quot;current&quot;,9,&quot;all&quot;,[&quot;^7&quot;,[[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Create the DataFrame flights\\nflights = spark.table(____)\\n\\n# Show the head\\n____.____()\\n\\n# Add duration_hrs\\nflights = flights.withColumn(____)&quot;,&quot;sct&quot;,&quot;# TODO: Nick, where did spark.table() come from?\\nEx().has_equal_ast(code=&#39;flights = spark.table(\\&quot;flights\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `flights` correctly?&#39;)\\nEx().has_equal_ast(code=&#39;flights.show()&#39;, exact=False, incorrect_msg=&#39;Did you show the head of `flights` correctly?&#39;)\\nEx().check_or(\\n    has_equal_ast(code=&#39;flights = flights.withColumn(\\&quot;duration_hrs\\&quot;, flights.air_time/60)&#39;, exact=False, incorrect_msg=&#39;Did you add `duration_hrs` to `flights` correctly?&#39;),\\n    has_equal_ast(code=&#39;flights = flights.withColumn(\\&quot;duration_hrs\\&quot;, flights.air_time/60.0)&#39;, exact=False, incorrect_msg=&#39;Did you add `duration_hrs` to `flights` correctly?&#39;)\\n)\\n\\nsuccess_msg(\\&quot;Good job! Now you can make new columns derived from the old ones!\\&quot;)&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Use the &lt;code&gt;spark.table()&lt;/code&gt; method with the argument &lt;code&gt;\\&quot;flights\\&quot;&lt;/code&gt; to create a DataFrame containing the values of the &lt;code&gt;flights&lt;/code&gt; table in the &lt;code&gt;.catalog&lt;/code&gt;. Save it as &lt;code&gt;flights&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Show the head of &lt;code&gt;flights&lt;/code&gt; using &lt;code&gt;flights.show()&lt;/code&gt;. Check the output: the column &lt;code&gt;air_time&lt;/code&gt; contains the duration of the flight in minutes.&lt;/li&gt;\\n&lt;li&gt;Update &lt;code&gt;flights&lt;/code&gt; to include a new column called &lt;code&gt;duration_hrs&lt;/code&gt;, that contains the duration of each flight in hours (you&#39;ll need to divide &lt;code&gt;air_time&lt;/code&gt; by the number of minutes in an hour).&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,159157,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;p&gt;To get the duration of each flight in hours, you can do &lt;code&gt;flights.air_time/60&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,1,&quot;randomNumber&quot;,0.24881326612676036,&quot;assignment&quot;,&quot;&lt;p&gt;In this chapter, you&#39;ll learn how to use the methods defined by Spark&#39;s &lt;code&gt;DataFrame&lt;/code&gt; class to perform common data operations.&lt;/p&gt;\\n&lt;p&gt;Let&#39;s look at performing column-wise operations. In Spark you can do this using the &lt;code&gt;.withColumn()&lt;/code&gt; method, which takes two arguments. First, a string with the name of your new column, and second the new column itself.&lt;/p&gt;\\n&lt;p&gt;The new column must be an object of class &lt;code&gt;Column&lt;/code&gt;. Creating one of these is as easy as extracting a column from your DataFrame using &lt;code&gt;df.colName&lt;/code&gt;.&lt;/p&gt;\\n&lt;p&gt;Updating a Spark DataFrame is somewhat different than working in &lt;code&gt;pandas&lt;/code&gt; because the Spark DataFrame is &lt;em&gt;immutable&lt;/em&gt;. This means that it can&#39;t be changed, and so columns can&#39;t be updated in place.&lt;/p&gt;\\n&lt;p&gt;Thus, all these methods return a new DataFrame. To overwrite the original DataFrame you must reassign the returned DataFrame using the method like so:&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;df = df.withColumn(\\&quot;newCol\\&quot;, df.oldCol + 1)\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;The above code creates a DataFrame with the same columns as &lt;code&gt;df&lt;/code&gt; plus a new column, &lt;code&gt;newCol&lt;/code&gt;, where every entry is equal to the corresponding entry from &lt;code&gt;oldCol&lt;/code&gt;, plus one.&lt;/p&gt;\\n&lt;p&gt;To overwrite an existing column, just pass the name of the column as the first argument!&lt;/p&gt;\\n&lt;p&gt;Remember, a &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Creating columns&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\ntemp = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header=True)\\ntemp.createOrReplaceTempView(\\&quot;flights\\&quot;)&quot;,&quot;solution&quot;,&quot;# Create the DataFrame flights\\nflights = spark.table(\\&quot;flights\\&quot;)\\n\\n# Show the head\\nflights.show()\\n\\n# Add duration_hrs\\nflights = flights.withColumn(\\&quot;duration_hrs\\&quot;, flights.air_time/60)&quot;,&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;id&quot;,159157]],[&quot;^2&quot;,[&quot;skills&quot;,[&quot;^7&quot;,[2]],&quot;sample_code&quot;,&quot;&quot;,&quot;sct&quot;,&quot;&quot;,&quot;instructions&quot;,null,&quot;externalId&quot;,159158,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;p&gt;The &lt;code&gt;duration&lt;/code&gt; column contains the length of each flight in &lt;em&gt;minutes&lt;/em&gt;!&lt;/p&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[&quot;&lt;code&gt;SELECT dest, tail_num FROM flights WHERE air_time &amp;gt; 10;&lt;/code&gt;&quot;,&quot;[&lt;code&gt;SELECT dest, tail_num FROM flights WHERE air_time &amp;gt; 600;&lt;/code&gt;]&quot;,&quot;&lt;code&gt;SELECT * FROM flights WHERE air_time &amp;gt; 600;&lt;/code&gt;&quot;]],&quot;runtime_config&quot;,&quot;spark&quot;,&quot;number&quot;,2,&quot;randomNumber&quot;,0.6934397896888131,&quot;chapter_id&quot;,13844,&quot;assignment&quot;,&quot;&lt;p&gt;As you move forward, it will help to have a basic understanding of SQL. A more in depth look can be found &lt;a href=\\&quot;https://www.datacamp.com/courses/intro-to-sql-for-data-science\\&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\\n&lt;p&gt;A SQL query returns a table derived from one or more tables contained in a database.&lt;/p&gt;\\n&lt;p&gt;Every SQL query is made up of commands that tell the database what you want to do with the data. The two commands that every query has to contain are &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;FROM&lt;/code&gt;.&lt;/p&gt;\\n&lt;p&gt;The &lt;code&gt;SELECT&lt;/code&gt; command is followed by the &lt;em&gt;columns&lt;/em&gt; you want in the resulting table.&lt;/p&gt;\\n&lt;p&gt;The &lt;code&gt;FROM&lt;/code&gt; command is followed by the name of the table that contains those columns. The minimal SQL query is:&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;SELECT * FROM my_table;\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; selects all columns, so this returns the entire table named &lt;code&gt;my_table&lt;/code&gt;.&lt;/p&gt;\\n&lt;p&gt;Similar to &lt;code&gt;.withColumn()&lt;/code&gt;, you can do column-wise computations within a &lt;code&gt;SELECT&lt;/code&gt; statement. For example,&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;SELECT origin, dest, air_time / 60 FROM flights;\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;returns a table with the origin, destination, and duration in hours for each flight.&lt;/p&gt;\\n&lt;p&gt;Another commonly used command is &lt;code&gt;WHERE&lt;/code&gt;. This command filters the rows of the table based on some logical condition you specify. The resulting table contains the rows where your condition is true. For example, if you had a table of students and grades you could do:&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;SELECT * FROM students\\nWHERE grade = &#39;A&#39;;\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;to select all the columns and the rows containing information about students who got As.&lt;/p&gt;\\n&lt;p&gt;&lt;hr&gt;\\nWhich of the following queries returns a table of tail numbers and destinations for flights that lasted more than 10 hours?&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[&quot;That&#39;s almost right, but remember &lt;code&gt;air_time&lt;/code&gt; is measured in minutes.&quot;,&quot;Great work! You&#39;re a SQL wizard!&quot;,&quot;What columns does &lt;code&gt;SELECT *&lt;/code&gt; return?&quot;]],&quot;lang&quot;,&quot;python&quot;,&quot;attachments&quot;,null,&quot;version&quot;,&quot;v0&quot;,&quot;title&quot;,&quot;SQL in a nutshell&quot;,&quot;xp&quot;,50,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;&quot;,&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;id&quot;,159158,&quot;key&quot;,&quot;cc169b3656&quot;,&quot;course_id&quot;,4452]],[&quot;^2&quot;,[&quot;skills&quot;,[&quot;^7&quot;,[2]],&quot;sample_code&quot;,&quot;&quot;,&quot;sct&quot;,&quot;&quot;,&quot;instructions&quot;,null,&quot;externalId&quot;,159159,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;p&gt;Remember, &lt;code&gt;air_time&lt;/code&gt; is measured in minutes and &lt;code&gt;GROUP BY&lt;/code&gt; groups the data according to the column (or columns) that come after it.&lt;/p&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[&quot;[The average length of each airline&#39;s flights from SEA and from PDX in hours.]&quot;,&quot;The average length of each flight.&quot;,&quot;The average length of each airline&#39;s flights.&quot;]],&quot;runtime_config&quot;,&quot;spark&quot;,&quot;number&quot;,3,&quot;randomNumber&quot;,0.7283549552126058,&quot;chapter_id&quot;,13844,&quot;assignment&quot;,&quot;&lt;p&gt;Another common database task is aggregation. That is, reducing your data by breaking it into chunks and summarizing each chunk.&lt;/p&gt;\\n&lt;p&gt;This is done in SQL using the &lt;code&gt;GROUP BY&lt;/code&gt; command. This command breaks your data into groups and applies a function from your &lt;code&gt;SELECT&lt;/code&gt; statement to each group.&lt;/p&gt;\\n&lt;p&gt;For example, if you wanted to count the number of flights from each of two origin destinations, you could use the query&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;SELECT COUNT(*) FROM flights\\nGROUP BY origin;\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;&lt;code&gt;GROUP BY origin&lt;/code&gt; tells SQL that you want the output to have a row for each unique value of the &lt;code&gt;origin&lt;/code&gt; column. The &lt;code&gt;SELECT&lt;/code&gt; statement selects the values you want to populate each of the columns. Here, we want to &lt;code&gt;COUNT()&lt;/code&gt; every row in each of the groups.&lt;/p&gt;\\n&lt;p&gt;It&#39;s possible to &lt;code&gt;GROUP BY&lt;/code&gt; more than one column. When you do this, the resulting table has a row for every combination of the unique values in each column. The following query counts the number of flights from SEA and PDX to every destination airport:&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;SELECT origin, dest, COUNT(*) FROM flights\\nGROUP BY origin, dest;\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;The output will have a row for every combination of the values in &lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; (i.e. a row listing each origin and destination that a flight flew to). There will also be a column with the &lt;code&gt;COUNT()&lt;/code&gt; of all the rows in each group.&lt;/p&gt;\\n&lt;p&gt;Remember, a more in depth look at SQL can be found &lt;a href=\\&quot;https://www.datacamp.com/courses/intro-to-sql-for-data-science\\&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\\n&lt;hr&gt;\\n&lt;p&gt;What information would this query get? Remember the &lt;code&gt;flights&lt;/code&gt; table holds information about flights that departed PDX and SEA in 2014 and 2015. Note that &lt;code&gt;AVG()&lt;/code&gt; function gets the average value of a column!&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;SELECT AVG(air_time) / 60 FROM flights\\nGROUP BY origin, carrier;\\n&lt;/code&gt;&lt;/pre&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[&quot;Awesome! You&#39;ve got this SQL stuff down!&quot;,&quot;Hm… what&#39;s the average length of a single flight?&quot;,&quot;That&#39;s almost right, but take a second look at the &lt;code&gt;GROUP BY&lt;/code&gt; statement.&quot;]],&quot;lang&quot;,&quot;python&quot;,&quot;attachments&quot;,null,&quot;version&quot;,&quot;v0&quot;,&quot;title&quot;,&quot;SQL in a nutshell (2)&quot;,&quot;xp&quot;,50,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;&quot;,&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;id&quot;,159159,&quot;key&quot;,&quot;2dcd635d41&quot;,&quot;course_id&quot;,4452]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Filter flights by passing a string\\nlong_flights1 = ____.____(\\&quot;____ &gt; ____\\&quot;)\\n\\n# Filter flights by passing a column of boolean values\\nlong_flights2 = ____.____(____.____ &gt; ____)\\n\\n# Print the data to check they&#39;re equal\\n____.____()\\n____.____()&quot;,&quot;sct&quot;,&quot;# this is the best way to check all of these, promise:\\nEx().check_or(\\n    has_equal_ast(code=&#39;long_flights1 = flights.filter(\\&quot;distance &gt; 1000\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `long_flights1` correctly? Did you pass a **string** as the argument to the first call of `.filter()?&#39;),\\n    has_equal_ast(code=&#39;long_flights1 = flights.filter(\\&quot;distance&gt;1000\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `long_flights1` correctly? Did you pass a **string** as the argument to the first call of `.filter()?&#39;),\\n  has_equal_ast(code=&#39;long_flights1 = flights.filter(\\&quot;distance &gt;1000\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `long_flights1` correctly? Did you pass a **string** as the argument to the first call of `.filter()`?&#39;),\\n  has_equal_ast(code=&#39;long_flights1 = flights.filter(\\&quot;distance&gt; 1000\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `long_flights1` correctly? Did you pass a **string** as the argument to the first call of `.filter()?&#39;)\\n)\\n\\nEx().has_equal_ast(code=&#39;long_flights2 = flights.filter(flights.distance &gt; 1000)&#39;, exact=False, incorrect_msg=&#39;Did you define `long_flights2` correctly? Did you pass a column of boolean values as the argument to the second call of `.filter()`?&#39;)\\n\\nEx().has_equal_ast(code=&#39;long_flights1.show()&#39;, exact=False, incorrect_msg=&#39;Did you use .show() to examine `long_flights1`?&#39;)\\nEx().has_equal_ast(code=&#39;long_flights2.show()&#39;, exact=False, incorrect_msg=&#39;Did you use .show() to examine `long_flights2`?&#39;)\\n\\nsuccess_msg(\\&quot;Awesome! PySpark often provides a few different ways to get the same results.\\&quot;)&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Use the &lt;code&gt;.filter()&lt;/code&gt; method to find all the flights that flew over 1000 miles two ways:&lt;ul&gt;\\n&lt;li&gt;First, pass a SQL &lt;strong&gt;string&lt;/strong&gt; to &lt;code&gt;.filter()&lt;/code&gt; that checks whether the distance is greater than 1000. Save this as &lt;code&gt;long_flights1&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Then pass a column of boolean values to &lt;code&gt;.filter()&lt;/code&gt; that checks the same thing. Save this as &lt;code&gt;long_flights2&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;\\n&lt;li&gt;Use &lt;code&gt;.show()&lt;/code&gt; to print heads of both DataFrames and make sure they&#39;re actually equal!&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,159160,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;p&gt;Remember, you can generate a column of boolean values with &lt;code&gt;flights.distance &amp;gt; 1000&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,4,&quot;randomNumber&quot;,0.7387314694601197,&quot;assignment&quot;,&quot;&lt;p&gt;Now that you have a bit of SQL know-how under your belt, it&#39;s easier to talk about the analogous operations using Spark DataFrames.&lt;/p&gt;\\n&lt;p&gt;Let&#39;s take a look at the &lt;code&gt;.filter()&lt;/code&gt; method. As you might suspect, this is the Spark counterpart of SQL&#39;s &lt;code&gt;WHERE&lt;/code&gt; clause. The &lt;code&gt;.filter()&lt;/code&gt; method takes either an expression that would follow the &lt;code&gt;WHERE&lt;/code&gt; clause of a SQL expression as a string, or a Spark Column of boolean (&lt;code&gt;True&lt;/code&gt;/&lt;code&gt;False&lt;/code&gt;) values.&lt;/p&gt;\\n&lt;p&gt;For example, the following two expressions will produce the same output:&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;flights.filter(\\&quot;air_time &amp;gt; 120\\&quot;).show()\\nflights.filter(flights.air_time &amp;gt; 120).show()\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;Notice that in the first case, we pass a &lt;em&gt;string&lt;/em&gt; to &lt;code&gt;.filter()&lt;/code&gt;. In SQL, we would write this filtering task as &lt;code&gt;SELECT * FROM flights WHERE air_time &amp;gt; 120&lt;/code&gt;. Spark&#39;s &lt;code&gt;.filter()&lt;/code&gt; can accept any expression that could go in the &lt;code&gt;WHERE&lt;/code&gt;clause of a SQL query (in this case, &lt;code&gt;\\&quot;air_time &amp;gt; 120\\&quot;&lt;/code&gt;), as long as it is passed as a string.\\nNotice that in this case, we do not reference the name of the table in the string -- as we wouldn&#39;t in the SQL request.&lt;/p&gt;\\n&lt;p&gt;In the second case, we actually pass a &lt;em&gt;column of boolean values&lt;/em&gt; to &lt;code&gt;.filter()&lt;/code&gt;. Remember that &lt;code&gt;flights.air_time &amp;gt; 120&lt;/code&gt; returns a column of boolean values that has &lt;code&gt;True&lt;/code&gt; in place of those records in &lt;code&gt;flights.air_time&lt;/code&gt; that are over 120, and &lt;code&gt;False&lt;/code&gt; otherwise.  &lt;/p&gt;\\n&lt;p&gt;Remember, a &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Filtering Data&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)&quot;,&quot;solution&quot;,&quot;# Filter flights by passing a string\\nlong_flights1 = flights.filter(\\&quot;distance &gt; 1000\\&quot;)\\n\\n# Filter flights by passing a column of boolean values\\nlong_flights2 = flights.filter(flights.distance &gt; 1000)\\n\\n# Print the data to check they&#39;re equal\\nlong_flights1.show()\\nlong_flights2.show()&quot;,&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;id&quot;,159160]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Select the first set of columns\\nselected1 = flights.select(\\&quot;____\\&quot;, \\&quot;____\\&quot;, \\&quot;____\\&quot;)\\n\\n# Select the second set of columns\\ntemp = flights.select(____.____, ____.____, ____.____)\\n\\n# Define first filter\\nfilterA = flights.origin == \\&quot;SEA\\&quot;\\n\\n# Define second filter\\nfilterB = flights.dest == \\&quot;PDX\\&quot;\\n\\n# Filter the data, first by filterA then by filterB\\nselected2 = temp.filter(____).filter(____)&quot;,&quot;sct&quot;,&quot;Ex().has_equal_ast(code=&#39;selected1 = flights.select(\\&quot;tailnum\\&quot;, \\&quot;origin\\&quot;, \\&quot;dest\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you select the correct set of columns for `selected1`?&#39;) #use this check or otherwise a manual converter is necessary\\n\\nEx().has_equal_ast(code=&#39;temp = flights.select(flights.origin, flights.dest, flights.carrier)&#39;, exact=False, incorrect_msg=&#39;Did you select the correct set of columns for `temp`?&#39;)\\nEx().has_equal_ast(code=&#39;filterA = flights.origin == \\&quot;SEA\\&quot;&#39;, exact=False, incorrect_msg=\\&quot;Don&#39;t modify `filterA`\\&quot;)\\nEx().has_equal_ast(code=&#39;filterB = flights.dest == \\&quot;PDX\\&quot;&#39;, exact=False, incorrect_msg=\\&quot;Don&#39;t modify `filterB`\\&quot;)\\nEx().has_equal_ast(code=&#39;selected2 = temp.filter(filterA).filter(filterB)&#39;, exact=False, incorrect_msg=&#39;Did you filter the data for `selected2` correctly?&#39;)\\n\\nsuccess_msg(\\&quot;Great work! You&#39;re speeding right through this course!\\&quot;)&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Select the columns &lt;code&gt;\\&quot;tailnum\\&quot;&lt;/code&gt;, &lt;code&gt;\\&quot;origin\\&quot;&lt;/code&gt;, and &lt;code&gt;\\&quot;dest\\&quot;&lt;/code&gt; from &lt;code&gt;flights&lt;/code&gt; by passing the column names as strings. Save this as &lt;code&gt;selected1&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Select the columns &lt;code&gt;\\&quot;origin\\&quot;&lt;/code&gt;, &lt;code&gt;\\&quot;dest\\&quot;&lt;/code&gt;, and &lt;code&gt;\\&quot;carrier\\&quot;&lt;/code&gt; using the &lt;code&gt;df.colName&lt;/code&gt; syntax and then filter the result using both of the filters already defined for you (&lt;code&gt;filterA&lt;/code&gt; and &lt;code&gt;filterB&lt;/code&gt;) to only keep flights from SEA to PDX. Save this as &lt;code&gt;selected2&lt;/code&gt;.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,159161,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;p&gt;Don&#39;t forget that you can select columns by calling &lt;code&gt;df.select(\\&quot;col1\\&quot;, df.col2)&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,5,&quot;randomNumber&quot;,0.6250929420037736,&quot;assignment&quot;,&quot;&lt;p&gt;The Spark variant of SQL&#39;s &lt;code&gt;SELECT&lt;/code&gt; is the &lt;code&gt;.select()&lt;/code&gt; method. This method takes multiple arguments - one for each column you want to select. These arguments can either be the column name as a string (one for each column) or a column object (using the &lt;code&gt;df.colName&lt;/code&gt; syntax). When you pass a column object, you can perform operations like addition or subtraction on the column to change the data contained in it, much like inside &lt;code&gt;.withColumn()&lt;/code&gt;.&lt;/p&gt;\\n&lt;p&gt;The difference between &lt;code&gt;.select()&lt;/code&gt; and &lt;code&gt;.withColumn()&lt;/code&gt; methods is that &lt;code&gt;.select()&lt;/code&gt; returns only the columns you specify, while &lt;code&gt;.withColumn()&lt;/code&gt; returns all the columns of the DataFrame in addition to the one you defined. It&#39;s often a good idea to drop columns you don&#39;t need at the beginning of an operation so that you&#39;re not dragging around extra data as you&#39;re wrangling. In this case, you would use &lt;code&gt;.select()&lt;/code&gt; and not &lt;code&gt;.withColumn()&lt;/code&gt;.&lt;/p&gt;\\n&lt;p&gt;Remember, a SparkSession called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Selecting&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)&quot;,&quot;solution&quot;,&quot;# Select the first set of columns\\nselected1 = flights.select(\\&quot;tailnum\\&quot;, \\&quot;origin\\&quot;, \\&quot;dest\\&quot;)\\n\\n# Select the second set of columns\\ntemp = flights.select(flights.origin, flights.dest, flights.carrier)\\n\\n# Define first filter\\nfilterA = flights.origin == \\&quot;SEA\\&quot;\\n\\n# Define second filter\\nfilterB = flights.dest == \\&quot;PDX\\&quot;\\n\\n# Filter the data, first by filterA then by filterB\\nselected2 = temp.filter(filterA).filter(filterB)&quot;,&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;id&quot;,159161]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Define avg_speed\\navg_speed = (flights.____/(flights.____/60)).alias(\\&quot;____\\&quot;)\\n\\n# Select the correct columns\\nspeed1 = flights.select(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, avg_speed)\\n\\n# Create the same table using a SQL expression\\nspeed2 = flights.selectExpr(\\&quot;____\\&quot;, \\&quot;____\\&quot;, \\&quot;____\\&quot;, \\&quot;distance/(air_time/60) as ____\\&quot;)&quot;,&quot;sct&quot;,&quot;Ex().has_equal_ast(code=&#39;avg_speed = (flights.distance/(flights.air_time/60)).alias(\\&quot;avg_speed\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `avg_speed` correctly?&#39;)\\nEx().has_equal_ast(code=&#39;speed1 = flights.select(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, avg_speed)&#39;, exact=False, incorrect_msg=&#39;Did you select the correct set of columns for `speed1`?&#39;)\\nEx().check_or(\\n    has_equal_ast(code=&#39;speed2 = flights.selectExpr(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, \\&quot;distance/(air_time/60) as avg_speed\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you use `.selectExpr()` correctly to define `speed2`?&#39;),\\n    has_equal_ast(code=&#39;speed2 = flights.selectExpr(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, \\&quot;distance/(air_time/60) AS avg_speed\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you use `.selectExpr()` correctly to define `speed2`?&#39;),\\n    has_equal_ast(code=&#39;speed2 = flights.selectExpr(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, \\&quot;distance / (air_time / 60) AS avg_speed\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you use `.selectExpr()` correctly to define `speed2`?&#39;)\\n)\\n\\nsuccess_msg(\\&quot;Wow! You&#39;re doing great!\\&quot;)&quot;,&quot;instructions&quot;,&quot;&lt;p&gt;Create a table of the average speed of each flight both ways.&lt;/p&gt;\\n&lt;ul&gt;\\n&lt;li&gt;Calculate average speed by dividing the &lt;code&gt;distance&lt;/code&gt; by the &lt;code&gt;air_time&lt;/code&gt; (converted to hours). Use the &lt;code&gt;.alias()&lt;/code&gt; method name this column &lt;code&gt;\\&quot;avg_speed\\&quot;&lt;/code&gt;. Save the output as the variable &lt;code&gt;avg_speed&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Select the columns &lt;code&gt;\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;&lt;/code&gt;, and &lt;code&gt;avg_speed&lt;/code&gt; (without quotes!). Save this as &lt;code&gt;speed1&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Create the same table using &lt;code&gt;.selectExpr()&lt;/code&gt; and a string containing a SQL expression. Save this as &lt;code&gt;speed2&lt;/code&gt;.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,159162,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Use the &lt;code&gt;.alias()&lt;/code&gt; method to rename a Spark column.&lt;/li&gt;\\n&lt;li&gt;Use the &lt;code&gt;AS&lt;/code&gt; keyword in a SQL expression to rename a column.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,6,&quot;randomNumber&quot;,0.8885488502791608,&quot;assignment&quot;,&quot;&lt;p&gt;Similar to SQL, you can also use the &lt;code&gt;.select()&lt;/code&gt; method to perform column-wise operations. When you&#39;re selecting a column using the &lt;code&gt;df.colName&lt;/code&gt; notation, you can perform any column operation and the &lt;code&gt;.select()&lt;/code&gt; method will return the transformed column. For example,&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;flights.select(flights.air_time/60)\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;returns a column of flight durations in hours instead of minutes. You can also use the &lt;code&gt;.alias()&lt;/code&gt; method to rename a column you&#39;re selecting. So if you wanted to &lt;code&gt;.select()&lt;/code&gt; the column &lt;code&gt;duration_hrs&lt;/code&gt; (which isn&#39;t in your DataFrame) you could do&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;flights.select((flights.air_time/60).alias(\\&quot;duration_hrs\\&quot;))\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;The equivalent Spark DataFrame method &lt;code&gt;.selectExpr()&lt;/code&gt; takes SQL expressions as a string:&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;flights.selectExpr(\\&quot;air_time/60 as duration_hrs\\&quot;)\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;with the SQL &lt;code&gt;as&lt;/code&gt; keyword being equivalent to the &lt;code&gt;.alias()&lt;/code&gt; method. To select multiple columns, you can pass multiple strings.&lt;/p&gt;\\n&lt;p&gt;Remember, a &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Selecting II&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)&quot;,&quot;solution&quot;,&quot;# Define avg_speed\\navg_speed = (flights.distance/(flights.air_time/60)).alias(\\&quot;avg_speed\\&quot;)\\n\\n# Select the correct columns\\nspeed1 = flights.select(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, avg_speed)\\n\\n# Create the same table using a SQL expression\\nspeed2 = flights.selectExpr(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, \\&quot;distance/(air_time/60) as avg_speed\\&quot;)&quot;,&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;id&quot;,159162]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Find the shortest flight from PDX in terms of distance\\nflights.filter(____.____ == ____).groupBy().____(____).show()\\n\\n# Find the longest flight from SEA in terms of air time\\nflights.filter(____).groupBy().____.show()&quot;,&quot;sct&quot;,&quot;Ex().check_or(\\n    has_equal_ast(code=&#39;flights.filter(flights.origin == \\&quot;PDX\\&quot;).groupBy().min(\\&quot;distance\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you filter flights to find the shortest flight from PDX by _referencing the column direcly_? Did you find the minimal `distance`?&#39;),\\n    has_equal_ast(code=&#39;flights.filter(\\&quot;origin == \\\\&#39;PDX\\\\&#39;\\&quot;).groupBy().min(\\&quot;distance\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you filter flights to find the shortest flight from PDX by _referencing the column direcly_? Did you find the minimal `distance`?&#39;)\\n)\\n\\nEx().check_or(\\n    has_equal_ast(code=&#39;flights.filter(flights.origin == \\&quot;SEA\\&quot;).groupBy().max(\\&quot;air_time\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you filter flights to find the longest flight from SEA by _referencing a column directly_? Did you find the maximal `air_time`?&#39;),\\n    has_equal_ast(code=&#39;flights.filter(\\&quot;origin == \\\\&#39;SEA\\\\&#39;\\&quot;).groupBy().max(\\&quot;air_time\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you filter flights to find the longest flight from SEA by _referencing the column direcly_? Did you find the maximal `air_time`?&#39;)\\n)\\n\\nsuccess_msg(\\&quot;Fantastic work! How do these methods help you learn about your data?\\&quot;)&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Find the length of the shortest (in terms of distance) flight that left PDX by first &lt;code&gt;.filter()&lt;/code&gt;ing and using the &lt;code&gt;.min()&lt;/code&gt; method. Perform the filtering by referencing the column directly, not passing a SQL string.&lt;/li&gt;\\n&lt;li&gt;Find the length of the longest (in terms of time) flight that left SEA by &lt;code&gt;filter()&lt;/code&gt;ing and using the &lt;code&gt;.max()&lt;/code&gt; method. Perform the filtering by referencing the column directly, not passing a SQL string.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,159163,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Make sure that you pass a &lt;em&gt;logical column&lt;/em&gt; as an argument to filter (e.g. &lt;code&gt;filter(df.col &amp;lt; 2)&lt;/code&gt;), not a string.&lt;/li&gt;\\n&lt;li&gt;The &lt;code&gt;.min()&lt;/code&gt; and &lt;code&gt;.max()&lt;/code&gt; methods, however, take the name of a column as a &lt;em&gt;string&lt;/em&gt;, e.g. &lt;code&gt;max(\\&quot;col\\&quot;)&lt;/code&gt;.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,7,&quot;randomNumber&quot;,0.21279066290421045,&quot;assignment&quot;,&quot;&lt;p&gt;All of the common aggregation methods, like &lt;code&gt;.min()&lt;/code&gt;, &lt;code&gt;.max()&lt;/code&gt;, and &lt;code&gt;.count()&lt;/code&gt; are &lt;code&gt;GroupedData&lt;/code&gt; methods. These are created by calling the &lt;code&gt;.groupBy()&lt;/code&gt; DataFrame method. You&#39;ll learn exactly what that means in a few exercises. For now, all you have to do to use these functions is call that method on your DataFrame. For example, to find the minimum value of a column, &lt;code&gt;col&lt;/code&gt;, in a DataFrame, &lt;code&gt;df&lt;/code&gt;, you could do&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;df.groupBy().min(\\&quot;col\\&quot;).show()\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;This creates a &lt;code&gt;GroupedData&lt;/code&gt; object (so you can use the &lt;code&gt;.min()&lt;/code&gt; method), then finds the minimum value in &lt;code&gt;col&lt;/code&gt;, and returns it as a DataFrame.&lt;/p&gt;\\n&lt;p&gt;Now you&#39;re ready to do some aggregating of your own!&lt;/p&gt;\\n&lt;p&gt;A &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Aggregating&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)\\nflights = flights.withColumn(\\&quot;distance\\&quot;, flights.distance.cast(\\&quot;integer\\&quot;)).\\\\\\nwithColumn(\\&quot;air_time\\&quot;, flights.air_time.cast(\\&quot;integer\\&quot;))&quot;,&quot;solution&quot;,&quot;# Find the shortest flight from PDX in terms of distance\\nflights.filter(flights.origin == \\&quot;PDX\\&quot;).groupBy().min(\\&quot;distance\\&quot;).show()\\n\\n# Find the longest flight from SEA in terms of air time\\nflights.filter(flights.origin == \\&quot;SEA\\&quot;).groupBy().max(\\&quot;air_time\\&quot;).show()&quot;,&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;id&quot;,159163]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Average duration of Delta flights\\nflights.filter(____.____ == \\&quot;____\\&quot;).filter(____.____ == \\&quot;____\\&quot;).groupBy().avg(\\&quot;____\\&quot;).show()\\n\\n# Total hours in the air\\nflights.withColumn(\\&quot;____\\&quot;, flights.air_time/60).groupBy().sum(\\&quot;____\\&quot;).show()&quot;,&quot;sct&quot;,&quot;Ex().check_or(\\n    has_equal_ast(code=&#39;flights.filter(flights.carrier == \\&quot;DL\\&quot;).filter(flights.origin == \\&quot;SEA\\&quot;).groupBy().avg(\\&quot;air_time\\&quot;).show()&#39;, exact=False, incorrect_msg=&#39;Did you calculate the average air time of Delta flights correctly?&#39;),\\n    has_equal_ast(code=&#39;flights.filter(flights.origin == \\&quot;SEA\\&quot;).filter(flights.carrier == \\&quot;DL\\&quot;).groupBy().avg(\\&quot;air_time\\&quot;).show()&#39;, exact=False, incorrect_msg=&#39;Did you calculate the average air time of Delta flights correctly?&#39;),\\n  \\thas_equal_ast(code = &#39;flights.filter(\\\\&#39;carrier = \\&quot;DL\\&quot;\\\\&#39;).filter(\\\\&#39;origin = \\&quot;SEA\\&quot;\\\\&#39;).groupBy().avg(\\&quot;air_time\\&quot;).show()&#39;, exact=False, incorrect_msg=&#39;Did you calculate the average air time of Delta flights correctly?&#39;),\\n\\thas_equal_ast(code = &#39;flights.filter(\\\\&#39;origin = \\&quot;SEA\\&quot;\\\\&#39;).filter(\\\\&#39;carrier = \\&quot;DL\\&quot;\\\\&#39;).groupBy().avg(\\&quot;air_time\\&quot;).show()&#39;, exact=False, incorrect_msg = \\&quot;Did you calculate the average air time of Delta flights correctly?\\&quot;)\\n)\\n\\nEx().has_equal_ast(code=&#39;flights.withColumn(\\&quot;duration_hrs\\&quot;, flights.air_time/60).groupBy().sum(\\&quot;duration_hrs\\&quot;).show()&#39;, exact=False, incorrect_msg=&#39;Did you `sum()` the total air time correctly?&#39;)\\n\\nsuccess_msg(\\&quot;Stellar job! Now you can answer some interesting questions about the data.\\&quot;)&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Use the &lt;code&gt;.avg()&lt;/code&gt; method to get the average air time of Delta Airlines flights (where the &lt;code&gt;carrier&lt;/code&gt; column has the value &lt;code&gt;\\&quot;DL\\&quot;&lt;/code&gt;) that left SEA. The place of departure is stored in the column &lt;code&gt;origin&lt;/code&gt;. &lt;code&gt;show()&lt;/code&gt; the result.&lt;/li&gt;\\n&lt;li&gt;Use the &lt;code&gt;.sum()&lt;/code&gt; method to get the total number of hours all planes in this dataset spent in the air by creating a column called &lt;code&gt;duration_hrs&lt;/code&gt; from the column &lt;code&gt;air_time&lt;/code&gt;. &lt;code&gt;show()&lt;/code&gt; the result.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,159164,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Use two logical conditions to filter the data, one matching the carrier code &lt;code&gt;\\&quot;DL\\&quot;&lt;/code&gt; and the other matching the airport code &lt;code&gt;SEA&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Create the column &lt;code&gt;duration_hrs&lt;/code&gt; and pass that as a string to the &lt;code&gt;.sum()&lt;/code&gt; method.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,8,&quot;randomNumber&quot;,0.8795148377122781,&quot;assignment&quot;,&quot;&lt;p&gt;To get you familiar with more of the built in aggregation methods, here&#39;s a few more exercises involving the &lt;code&gt;flights&lt;/code&gt; table!&lt;/p&gt;\\n&lt;p&gt;Remember, a &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Aggregating II&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)\\nflights = flights.withColumn(\\&quot;distance\\&quot;, flights.distance.cast(\\&quot;integer\\&quot;)).\\\\\\nwithColumn(\\&quot;air_time\\&quot;, flights.air_time.cast(\\&quot;integer\\&quot;))&quot;,&quot;solution&quot;,&quot;# Average duration of Delta flights\\nflights.filter(flights.carrier == \\&quot;DL\\&quot;).filter(flights.origin == \\&quot;SEA\\&quot;).groupBy().avg(\\&quot;air_time\\&quot;).show()\\n\\n# Total hours in the air\\nflights.withColumn(\\&quot;duration_hrs\\&quot;, flights.air_time/60).groupBy().sum(\\&quot;duration_hrs\\&quot;).show()&quot;,&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;id&quot;,159164]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Group by tailnum\\nby_plane = flights.groupBy(\\&quot;____\\&quot;)\\n\\n# Number of flights each plane made\\nby_plane.____.show()\\n\\n# Group by origin\\nby_origin = flights.groupBy(\\&quot;____\\&quot;)\\n\\n# Average duration of flights from PDX and SEA\\nby_origin.avg(\\&quot;____\\&quot;).show()&quot;,&quot;sct&quot;,&quot;Ex().has_equal_ast(code=&#39;by_plane = flights.groupBy(\\&quot;tailnum\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `by_plane` correctly? Be sure to check your argument to `.groupBy()`.&#39;)\\nEx().has_equal_ast(code=&#39;by_origin = flights.groupBy(\\&quot;origin\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `by_origin` correctly? Be sure to check your argument to `.groupBy()`.&#39;)\\nEx().has_equal_ast(code=&#39;by_plane.count().show()&#39;, exact=False, incorrect_msg=&#39;Did you `count()` the number of flights correctly?&#39;)\\nEx().has_equal_ast(code=&#39;by_origin.avg(\\&quot;air_time\\&quot;).show()&#39;, exact=False, incorrect_msg=&#39;Did you compute the average air time correctly?&#39;)\\n\\nsuccess_msg(\\&quot;Great work! You&#39;re passing with flying colors!\\&quot;)&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Create a DataFrame called &lt;code&gt;by_plane&lt;/code&gt; that is grouped by the column &lt;code&gt;tailnum&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Use the &lt;code&gt;.count()&lt;/code&gt; method with no arguments to count the number of flights each plane made.&lt;/li&gt;\\n&lt;li&gt;Create a DataFrame called &lt;code&gt;by_origin&lt;/code&gt; that is grouped by the column &lt;code&gt;origin&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Find the &lt;code&gt;.avg()&lt;/code&gt; of the &lt;code&gt;air_time&lt;/code&gt; column to find average duration of flights from PDX and SEA.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,159165,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;p&gt;The &lt;code&gt;.groupBy()&lt;/code&gt; and &lt;code&gt;.avg()&lt;/code&gt; methods take the name of a column as a string. The &lt;code&gt;.count()&lt;/code&gt; method takes no arguments.&lt;/p&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,9,&quot;randomNumber&quot;,0.7643468477522732,&quot;assignment&quot;,&quot;&lt;p&gt;Part of what makes aggregating so powerful is the addition of groups. PySpark has a whole class devoted to grouped data frames: &lt;code&gt;pyspark.sql.GroupedData&lt;/code&gt;, which you saw in the last two exercises.&lt;/p&gt;\\n&lt;p&gt;You&#39;ve learned how to create a grouped DataFrame by calling the &lt;code&gt;.groupBy()&lt;/code&gt; method on a DataFrame with no arguments.&lt;/p&gt;\\n&lt;p&gt;Now you&#39;ll see that when you pass the name of one or more columns in your DataFrame to the &lt;code&gt;.groupBy()&lt;/code&gt; method, the aggregation methods behave like when you use a &lt;code&gt;GROUP BY&lt;/code&gt; statement in a SQL query!&lt;/p&gt;\\n&lt;p&gt;Remember, a &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Grouping and Aggregating I&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)\\nflights = flights.withColumn(\\&quot;distance\\&quot;, flights.distance.cast(\\&quot;integer\\&quot;)).\\\\\\nwithColumn(\\&quot;air_time\\&quot;, flights.air_time.cast(\\&quot;integer\\&quot;))&quot;,&quot;solution&quot;,&quot;# Group by tailnum\\nby_plane = flights.groupBy(\\&quot;tailnum\\&quot;)\\n\\n# Number of flights each plane made\\nby_plane.count().show()\\n\\n# Group by origin\\nby_origin = flights.groupBy(\\&quot;origin\\&quot;)\\n\\n# Average duration of flights from PDX and SEA\\nby_origin.avg(\\&quot;air_time\\&quot;).show()&quot;,&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;id&quot;,159165]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Import pyspark.sql.functions as F\\nimport ____ as F\\n\\n# Group by month and dest\\nby_month_dest = flights.groupBy(____)\\n\\n# Average departure delay by month and destination\\nby_month_dest.____.show()\\n\\n# Standard deviation of departure delay\\nby_month_dest.agg(F.____(____)).show()&quot;,&quot;sct&quot;,&quot;# Ex().has_equal_ast(code=&#39;import pyspark.sql.functions as F&#39;, exact=False, incorrect_msg=&#39;Did you import `pyspark.sql.functions` correctly?&#39;)\\nEx().has_import(\\&quot;pyspark.sql.functions\\&quot;, same_as=True, not_imported_msg=&#39;Did you import `pyspark.sql.functions` correctly?&#39;)\\n\\nEx().has_equal_ast(code=&#39;by_month_dest = flights.groupBy(\\&quot;month\\&quot;, \\&quot;dest\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `by_month_dest` correctly?&#39;)\\nEx().has_equal_ast(code=&#39;by_month_dest.avg(\\&quot;dep_delay\\&quot;).show()&#39;, exact=False, incorrect_msg=&#39;Did you call `.avg()` correctly? Did you average over the correct column?&#39;)\\nEx().has_equal_ast(code=&#39;by_month_dest.agg(F.stddev(\\&quot;dep_delay\\&quot;)).show()&#39;, exact=False, incorrect_msg=&#39;Did you call `stddev()` correctly?&#39;)\\n\\nsuccess_msg(\\&quot;Amazing! You&#39;re learning so much from just a few simple methods!\\&quot;)&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Import the submodule &lt;code&gt;pyspark.sql.functions&lt;/code&gt; as &lt;code&gt;F&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Create a &lt;code&gt;GroupedData&lt;/code&gt; table called &lt;code&gt;by_month_dest&lt;/code&gt; that&#39;s grouped by both the &lt;code&gt;month&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; columns. Refer to the two columns by passing both strings as separate arguments.&lt;/li&gt;\\n&lt;li&gt;Use the &lt;code&gt;.avg()&lt;/code&gt; method on the &lt;code&gt;by_month_dest&lt;/code&gt; DataFrame to get the average &lt;code&gt;dep_delay&lt;/code&gt; in each month for each destination.&lt;/li&gt;\\n&lt;li&gt;Find the standard deviation of &lt;code&gt;dep_delay&lt;/code&gt; by using the &lt;code&gt;.agg()&lt;/code&gt; method with the function &lt;code&gt;F.stddev()&lt;/code&gt;.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,159166,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;The &lt;code&gt;.groupBy()&lt;/code&gt; method can take as many columns as arguments as you want.&lt;/li&gt;\\n&lt;li&gt;Use &lt;code&gt;.agg()&lt;/code&gt; by calling &lt;code&gt;grouped_df.agg(F.____(\\&quot;col\\&quot;))&lt;/code&gt;.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,10,&quot;user&quot;,[&quot;^2&quot;,[&quot;isHintShown&quot;,false,&quot;editorTabs&quot;,[&quot;^2&quot;,[&quot;files/script.py&quot;,[&quot;^2&quot;,[&quot;title&quot;,&quot;script.py&quot;,&quot;isSolution&quot;,false,&quot;props&quot;,[&quot;^2&quot;,[&quot;active&quot;,true,&quot;isClosable&quot;,false,&quot;code&quot;,null,&quot;extra&quot;,[&quot;^2&quot;,[]]]]]]]],&quot;outputMarkdownTabs&quot;,[&quot;^2&quot;,[]],&quot;markdown&quot;,[&quot;^2&quot;,[&quot;titles&quot;,[&quot;^7&quot;,[&quot;Knit PDF&quot;,&quot;Knit HTML&quot;]],&quot;activeTitle&quot;,&quot;Knit HTML&quot;]],&quot;currentXp&quot;,100,&quot;graphicalTabs&quot;,[&quot;^2&quot;,[&quot;plot&quot;,[&quot;^2&quot;,[&quot;extraClass&quot;,&quot;animation--flash&quot;,&quot;title&quot;,&quot;Plots&quot;,&quot;props&quot;,[&quot;^2&quot;,[&quot;sources&quot;,[&quot;^7&quot;,[]],&quot;currentIndex&quot;,0]],&quot;dimension&quot;,[&quot;^2&quot;,[&quot;isRealSize&quot;,false,&quot;width&quot;,1,&quot;height&quot;,1]]]],&quot;html&quot;,[&quot;^2&quot;,[&quot;extraClass&quot;,&quot;animation--flash&quot;,&quot;title&quot;,&quot;HTML Viewer&quot;,&quot;props&quot;,[&quot;^2&quot;,[&quot;sources&quot;,[&quot;^7&quot;,[]],&quot;currentIndex&quot;,0]]]]]],&quot;feedbackMessages&quot;,[&quot;^7&quot;,[]],&quot;lastSubmittedCode&quot;,null,&quot;ltiStatus&quot;,[&quot;^2&quot;,[]],&quot;lastSubmitActiveEditorTab&quot;,null,&quot;consoleSqlTabs&quot;,[&quot;^2&quot;,[&quot;query_result&quot;,[&quot;^2&quot;,[&quot;extraClass&quot;,&quot;&quot;,&quot;title&quot;,&quot;query result&quot;,&quot;props&quot;,[&quot;^2&quot;,[&quot;active&quot;,true,&quot;isNotView&quot;,true,&quot;message&quot;,&quot;No query executed yet...&quot;]]]]]],&quot;consoleTabs&quot;,[&quot;^2&quot;,[&quot;console&quot;,[&quot;^2&quot;,[&quot;title&quot;,&quot;IPython Shell&quot;,&quot;props&quot;,[&quot;^2&quot;,[&quot;active&quot;,true]],&quot;dimension&quot;,[&quot;^2&quot;,[&quot;cols&quot;,400]]]],&quot;slides&quot;,[&quot;^2&quot;,[&quot;title&quot;,&quot;Slides&quot;,&quot;props&quot;,[&quot;^2&quot;,[&quot;active&quot;,false]]]],&quot;notes&quot;,[&quot;^2&quot;,[&quot;title&quot;,&quot;Notes&quot;,&quot;props&quot;,[&quot;^2&quot;,[&quot;active&quot;,false]]]]]],&quot;inputMarkdownTabs&quot;,[&quot;^2&quot;,[]],&quot;consoleObjectViewTabs&quot;,[&quot;^2&quot;,[]]]],&quot;randomNumber&quot;,0.5365042294499203,&quot;assignment&quot;,&quot;&lt;p&gt;In addition to the &lt;code&gt;GroupedData&lt;/code&gt; methods you&#39;ve already seen, there is also the &lt;code&gt;.agg()&lt;/code&gt; method.\\nThis method lets you pass an aggregate column expression that uses any of the aggregate functions from the &lt;code&gt;pyspark.sql.functions&lt;/code&gt; submodule.&lt;/p&gt;\\n&lt;p&gt;This submodule contains many useful functions for computing things like standard deviations. All the aggregation functions in this submodule take the name of a column in a &lt;code&gt;GroupedData&lt;/code&gt; table.&lt;/p&gt;\\n&lt;p&gt;Remember, a &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;. The grouped DataFrames you created in the last exercise are also in your workspace.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Grouping and Aggregating II&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)\\nflights = flights.withColumn(\\&quot;distance\\&quot;, flights.distance.cast(\\&quot;integer\\&quot;)).\\\\\\nwithColumn(\\&quot;dep_delay\\&quot;, flights.dep_delay.cast(\\&quot;integer\\&quot;))&quot;,&quot;solution&quot;,&quot;# Import pyspark.sql.functions as F\\nimport pyspark.sql.functions as F\\n\\n# Group by month and dest\\nby_month_dest = flights.groupBy(\\&quot;month\\&quot;, \\&quot;dest\\&quot;)\\n\\n# Average departure delay by month and destination\\nby_month_dest.avg(\\&quot;dep_delay\\&quot;).show()\\n\\n# Standard deviation of departure delay\\nby_month_dest.agg(F.stddev(\\&quot;dep_delay\\&quot;)).show()&quot;,&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;id&quot;,159166]],[&quot;^2&quot;,[&quot;skills&quot;,[&quot;^7&quot;,[2]],&quot;sample_code&quot;,&quot;&quot;,&quot;sct&quot;,&quot;&quot;,&quot;instructions&quot;,null,&quot;externalId&quot;,159167,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;p&gt;All the different kinds of joins take columns from one table and add them to columns in another table by matching them on a key.&lt;/p&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[&quot;Joins combine tables.&quot;,&quot;Joins add information to a table.&quot;,&quot;Storing information in separate tables can reduce repetition.&quot;,&quot;[There is only one kind of join.]&quot;]],&quot;runtime_config&quot;,&quot;spark&quot;,&quot;number&quot;,11,&quot;randomNumber&quot;,0.27013505242186553,&quot;chapter_id&quot;,13844,&quot;assignment&quot;,&quot;&lt;p&gt;Another very common data operation is the &lt;em&gt;join&lt;/em&gt;. Joins are a whole topic unto themselves, so in this course we&#39;ll just look at simple joins. If you&#39;d like to learn more about joins, you can take a look &lt;a href=\\&quot;https://www.datacamp.com/courses/joining-data-with-pandas\\&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\\n&lt;p&gt;A join will combine two different tables along a column that they share. This column is called the &lt;em&gt;key&lt;/em&gt;. Examples of keys here include the &lt;code&gt;tailnum&lt;/code&gt; and &lt;code&gt;carrier&lt;/code&gt; columns from the &lt;code&gt;flights&lt;/code&gt; table.&lt;/p&gt;\\n&lt;p&gt;For example, suppose that you want to know more information about the plane that flew a flight than just the tail number. This information isn&#39;t in the &lt;code&gt;flights&lt;/code&gt; table because the same plane flies many different flights over the course of two years, so including this information in every row would result in a lot of duplication. To avoid this, you&#39;d have a second table that has only one row for each plane and whose columns list all the information about the plane, including its tail number. You could call this table &lt;code&gt;planes&lt;/code&gt;&lt;/p&gt;\\n&lt;p&gt;When you join the &lt;code&gt;flights&lt;/code&gt; table to this table of airplane information, you&#39;re adding all the columns from the &lt;code&gt;planes&lt;/code&gt; table to the &lt;code&gt;flights&lt;/code&gt; table. To fill these columns with information, you&#39;ll look at the tail number from the &lt;code&gt;flights&lt;/code&gt; table and find the matching one in the &lt;code&gt;planes&lt;/code&gt; table, and then use that row to fill out all the new columns.&lt;/p&gt;\\n&lt;p&gt;Now you&#39;ll have a much bigger table than before, but now every row has all information about the plane that flew that flight!&lt;/p&gt;\\n&lt;hr&gt;\\n&lt;p&gt;Which of the following is &lt;strong&gt;not&lt;/strong&gt; true?&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[&quot;A join adds information from one table to another table.&quot;,&quot;Joins combine two tables, so the output should have more information in it than the input.&quot;,&quot;Putting all your data in a single table can mean having to repeat a lot of values. Think about how planes make many flights.&quot;,&quot;Great job! If there were only one kind of join, it would be tough to create some more complicated kinds of tables.&quot;]],&quot;lang&quot;,&quot;python&quot;,&quot;attachments&quot;,null,&quot;version&quot;,&quot;v0&quot;,&quot;title&quot;,&quot;Joining&quot;,&quot;xp&quot;,50,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;&quot;,&quot;solution&quot;,&quot;&quot;,&quot;type&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;id&quot;,159167,&quot;key&quot;,&quot;2aa88e551e&quot;,&quot;course_id&quot;,4452]],[&quot;^2&quot;,[&quot;sample_code&quot;,&quot;# Examine the data\\nprint(____)\\n\\n# Rename the faa column\\nairports = ____\\n\\n# Join the DataFrames\\nflights_with_airports = ____\\n\\n# Examine the new DataFrame\\nprint(____)&quot;,&quot;sct&quot;,&quot;Ex().has_equal_ast(code=&#39;airports.show()&#39;, exact=False, incorrect_msg=&#39;Did you print` airports` correctly?&#39;)\\n\\n# Ex().has_equal_ast(code=&#39;airports = airports.withColumnRenamed(\\&quot;faa\\&quot;, \\&quot;dest\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `airports` correctly?&#39;)\\nEx().check_function(&#39;airports.withColumnRenamed&#39;).multi(\\n    check_args(0).has_equal_ast(),\\n  \\tcheck_args(1).has_equal_ast()\\n)\\n\\n# Ex().has_equal_ast(code=&#39;flights_with_airports = flights.join(airports, on=\\&quot;dest\\&quot;, how=\\&quot;leftouter\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `flights_with_airports` correctly?&#39;)\\nEx().check_function(&#39;flights.join&#39;).multi(\\n    check_args(0).has_equal_ast(),\\n    check_args(&#39;on&#39;).has_equal_ast(),\\n    check_args(&#39;how&#39;).has_equal_ast()\\n)\\nEx().has_equal_ast(code=&#39;flights_with_airports.show()&#39;, exact=False, incorrect_msg=&#39;Did you print `flights_with_airports` correctly?&#39;)\\n\\nsuccess_msg(\\&quot;Fantastic work! You&#39;re a data manipulation pro!\\&quot;)&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Examine the &lt;code&gt;airports&lt;/code&gt; DataFrame by calling &lt;code&gt;.show()&lt;/code&gt;. Note which key column will let you join &lt;code&gt;airports&lt;/code&gt; to the &lt;code&gt;flights&lt;/code&gt; table.&lt;/li&gt;\\n&lt;li&gt;Rename the &lt;code&gt;faa&lt;/code&gt; column in &lt;code&gt;airports&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt; by re-assigning the result of &lt;code&gt;airports.withColumnRenamed(\\&quot;faa\\&quot;, \\&quot;dest\\&quot;)&lt;/code&gt; to &lt;code&gt;airports&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Join the &lt;code&gt;flights&lt;/code&gt; with the &lt;code&gt;airports&lt;/code&gt; DataFrame on the &lt;code&gt;dest&lt;/code&gt; column by calling the &lt;code&gt;.join()&lt;/code&gt; method on &lt;code&gt;flights&lt;/code&gt;. Save the result as &lt;code&gt;flights_with_airports&lt;/code&gt;.&lt;ul&gt;\\n&lt;li&gt;The first argument should be the other DataFrame, &lt;code&gt;airports&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;The argument &lt;code&gt;on&lt;/code&gt; should be the key column.&lt;/li&gt;\\n&lt;li&gt;The argument &lt;code&gt;how&lt;/code&gt; should be &lt;code&gt;\\&quot;leftouter\\&quot;&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;\\n&lt;li&gt;Call &lt;code&gt;.show()&lt;/code&gt; on &lt;code&gt;flights_with_airports&lt;/code&gt; to examine the data again. Note the new information that has been added.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;externalId&quot;,159168,&quot;question&quot;,&quot;&quot;,&quot;hint&quot;,&quot;&lt;p&gt;Make sure the key columns have the same name and that you&#39;ve specified all three arguments to &lt;code&gt;.join()&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;possible_answers&quot;,[&quot;^7&quot;,[]],&quot;number&quot;,12,&quot;randomNumber&quot;,0.6272933990293248,&quot;assignment&quot;,&quot;&lt;p&gt;In PySpark, joins are performed using the DataFrame method &lt;code&gt;.join()&lt;/code&gt;. This method takes three arguments. The first is the second DataFrame that you want to join with the first one. The second argument, &lt;code&gt;on&lt;/code&gt;, is the name of the key column(s) as a string. The names of the key column(s) must be the same in each table. The third argument, &lt;code&gt;how&lt;/code&gt;, specifies the kind of join to perform. In this course we&#39;ll always use the value &lt;code&gt;how=\\&quot;leftouter\\&quot;&lt;/code&gt;.&lt;/p&gt;\\n&lt;p&gt;The &lt;code&gt;flights&lt;/code&gt; dataset and a new dataset called &lt;code&gt;airports&lt;/code&gt; are already in your workspace.&lt;/p&gt;&quot;,&quot;feedbacks&quot;,[&quot;^7&quot;,[]],&quot;attachments&quot;,null,&quot;title&quot;,&quot;Joining II&quot;,&quot;xp&quot;,100,&quot;language&quot;,&quot;python&quot;,&quot;pre_exercise_code&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)\\nairports = spark.read.csv(\\&quot;/usr/local/share/datasets/airports.csv\\&quot;, header = True)&quot;,&quot;solution&quot;,&quot;# Examine the data\\nairports.show()\\n\\n# Rename the faa column\\nairports = airports.withColumnRenamed(\\&quot;faa\\&quot;, \\&quot;dest\\&quot;)\\n\\n# Join the DataFrames\\nflights_with_airports = flights.join(airports, on=\\&quot;dest\\&quot;, how=\\&quot;leftouter\\&quot;)\\n\\n# Examine the new DataFrame\\nflights_with_airports.show()&quot;,&quot;type&quot;,&quot;SingleProcessExercise&quot;,&quot;id&quot;,159168]]]],&quot;canRateChapter&quot;,false,&quot;isChapterCompleted&quot;,false]],&quot;learningMode&quot;,&quot;course&quot;,&quot;location&quot;,[&quot;^2&quot;,[&quot;current&quot;,[&quot;^2&quot;,[&quot;pathname&quot;,&quot;/courses/introduction-to-pyspark/manipulating-data-2&quot;,&quot;query&quot;,[&quot;^2&quot;,[&quot;ex&quot;,&quot;10&quot;]]]],&quot;canonical&quot;,null]],&quot;mobilePopup&quot;,[&quot;^2&quot;,[]],&quot;onboardingMilestones&quot;,[&quot;^ &quot;,&quot;isStarted&quot;,false,&quot;isActive&quot;,true,&quot;step&quot;,0],&quot;notes&quot;,[&quot;^ &quot;,&quot;workspaceNotes&quot;,null,&quot;workspaceTemplate&quot;,[&quot;^ &quot;,&quot;key&quot;,&quot;python-course-notes-boilerplate&quot;,&quot;title&quot;,&quot;Course Notes: Introduction to PySpark&quot;]],&quot;preFetchedData&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedDataStateRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;^9&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedRequestRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;status&quot;,&quot;SUCCESS&quot;,&quot;data&quot;,[&quot;^ &quot;,&quot;id&quot;,4452,&quot;^E&quot;,&quot;Introduction to PySpark&quot;,&quot;description&quot;,&quot;In this course, you&#39;ll learn how to use Spark from Python! Spark is a tool for doing parallel computation with large datasets and it integrates well with Python. PySpark is the Python package that makes the magic happen. You&#39;ll use this package to work with data about flights from Portland and Seattle. You&#39;ll learn to wrangle this data and build a whole machine learning pipeline to predict whether or not flights will be delayed. Get ready to put some Spark in your Python code and dive into the world of high-performance machine learning!&quot;,&quot;short_description&quot;,&quot;Learn to implement distributed data management and machine learning in Spark using the PySpark package.&quot;,&quot;author_field&quot;,null,&quot;author_bio&quot;,null,&quot;author_image&quot;,&quot;placeholder.png&quot;,&quot;nb_of_subscriptions&quot;,108420,&quot;slug&quot;,&quot;introduction-to-pyspark&quot;,&quot;image_url&quot;,&quot;https://assets.datacamp.com/production/course_4452/shields/thumb/shield_image_course_4452_20191230-1-6e9bmp?1577742310&quot;,&quot;image_thumbnail_url&quot;,&quot;https://assets.datacamp.com/production/course_4452/shields/thumb_home/shield_image_course_4452_20191230-1-6e9bmp?1577742310&quot;,&quot;last_updated_on&quot;,&quot;13/01/2023&quot;,&quot;link&quot;,&quot;https://www.datacamp.com/courses/introduction-to-pyspark&quot;,&quot;should_cache&quot;,true,&quot;type&quot;,&quot;datacamp&quot;,&quot;difficulty_level&quot;,1,&quot;state&quot;,&quot;live&quot;,&quot;university&quot;,null,&quot;sharing_links&quot;,[&quot;^ &quot;,&quot;twitter&quot;,&quot;http://bit.ly/1eWTMJh&quot;,&quot;facebook&quot;,&quot;http://bit.ly/1iS42Do&quot;],&quot;marketing_video&quot;,&quot;&quot;,&quot;programming_language&quot;,&quot;python&quot;,&quot;paid&quot;,true,&quot;time_needed&quot;,null,&quot;xp&quot;,3850,&quot;topic_id&quot;,10,&quot;technology_id&quot;,2,&quot;reduced_outline&quot;,null,&quot;runtime_config&quot;,&quot;spark&quot;,&quot;lti_only&quot;,false,&quot;instructors&quot;,[[&quot;^ &quot;,&quot;id&quot;,310314,&quot;marketing_biography&quot;,&quot;Director of Data Science Education at Flatiron School&quot;,&quot;biography&quot;,&quot;Lore is a data scientist with expertise in applied finance. She obtained her PhD in Business Economics and Statistics at KU Leuven, Belgium. During her PhD, she collaborated with several banks working on advanced methods for the analysis of credit risk data. Lore formerly worked as a Data Science Curriculum Lead at DataCamp, and is and is now Director of Data Science Education at Flatiron School, a coding school with branches in 8 cities and online programs.&quot;,&quot;avatar_url&quot;,&quot;https://assets.datacamp.com/users/avatars/000/310/314/square/loreaboutpic.jpg?1493154524&quot;,&quot;full_name&quot;,&quot;Lore Dirick&quot;,&quot;instructor_path&quot;,&quot;/instructors/lore&quot;],[&quot;^ &quot;,&quot;id&quot;,268605,&quot;^1:&quot;,&quot;Data Scientist&quot;,&quot;^1;&quot;,&quot;Nick has a degree in mathematics with a concentration in statistics from Reed College. He&#39;s worked on many data science projects in the past, doing everything from mapping crime data to developing new kinds of models for social networks. He&#39;s currently a data scientist in the New York City area.&quot;,&quot;^1&lt;&quot;,&quot;https://assets.datacamp.com/users/avatars/000/268/605/square/20202701_-_Nick_Solomon.jpeg?1538221795&quot;,&quot;^1=&quot;,&quot;Nick Solomon&quot;,&quot;^1&gt;&quot;,&quot;/instructors/nicksolomon10&quot;]],&quot;collaborators&quot;,[[&quot;^ &quot;,&quot;^1&lt;&quot;,&quot;https://assets.datacamp.com/users/avatars/000/830/418/square/gccolin.jpeg?1648299562&quot;,&quot;^1=&quot;,&quot;Colin Ricardo&quot;]],&quot;datasets&quot;,[[&quot;^ &quot;,&quot;asset_url&quot;,&quot;https://assets.datacamp.com/production/repositories/1237/datasets/6e5c4ac2a4799338ba7e13d54ce1fa918da644ba/airports.csv&quot;,&quot;name&quot;,&quot;Airports&quot;],[&quot;^ &quot;,&quot;^1A&quot;,&quot;https://assets.datacamp.com/production/repositories/1237/datasets/fa47bb54e83abd422831cbd4f441bd30fd18bd15/flights_small.csv&quot;,&quot;^1B&quot;,&quot;Flights&quot;],[&quot;^ &quot;,&quot;^1A&quot;,&quot;https://assets.datacamp.com/production/repositories/1237/datasets/231480a2696c55fde829ce76d936596123f12c0c/planes.csv&quot;,&quot;^1B&quot;,&quot;Planes&quot;]],&quot;tracks&quot;,[[&quot;^ &quot;,&quot;path&quot;,&quot;/tracks/big-data-with-pyspark&quot;,&quot;title_with_subtitle&quot;,&quot;Big Data with PySpark&quot;],[&quot;^ &quot;,&quot;^1D&quot;,&quot;/tracks/data-engineer-with-python&quot;,&quot;^1E&quot;,&quot;Data Engineer with Python&quot;],[&quot;^ &quot;,&quot;^1D&quot;,&quot;/tracks/machine-learning-scientist-with-python&quot;,&quot;^1E&quot;,&quot;Machine Learning Scientist with Python&quot;]],&quot;prerequisites&quot;,[[&quot;^ &quot;,&quot;^1D&quot;,&quot;/courses/intro-to-python-for-data-science&quot;,&quot;^E&quot;,&quot;Introduction to Python&quot;]],&quot;time_needed_in_hours&quot;,4,&quot;seo_title&quot;,&quot;Introduction to PySpark&quot;,&quot;seo_description&quot;,&quot;Learn to wrangle data and build a machine learning pipeline to make predictions with  PySpark Python package. Practice your skills with real-world data.&quot;,&quot;archived_at&quot;,null,&quot;original_image_url&quot;,&quot;https://assets.datacamp.com/production/course_4452/shields/original/shield_image_course_4452_20191230-1-6e9bmp?1577742310&quot;,&quot;external_slug&quot;,&quot;introduction-to-pyspark&quot;,&quot;mobile_enabled&quot;,null,&quot;case_study&quot;,null,&quot;difficulty_level_hardcoded&quot;,null,&quot;long_description&quot;,null,&quot;chapters&quot;,[[&quot;^ &quot;,&quot;id&quot;,13843,&quot;title_meta&quot;,null,&quot;^E&quot;,&quot;Getting to know PySpark&quot;,&quot;^I&quot;,&quot;In this chapter, you&#39;ll learn how Spark manages data and how can you read and write tables from Python.&quot;,&quot;number&quot;,1,&quot;^O&quot;,&quot;getting-to-know-pyspark&quot;,&quot;nb_exercises&quot;,10,&quot;badge_completed_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;,&quot;badge_uncompleted_url&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;^R&quot;,&quot;27/04/2022&quot;,&quot;slides_link&quot;,null,&quot;free_preview&quot;,true,&quot;xp&quot;,850,&quot;number_of_videos&quot;,0,&quot;^:&quot;,[[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;What is Spark, anyway?&quot;,&quot;aggregate_xp&quot;,50,&quot;^1S&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=1&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;Using Spark in Python&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=2&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Examining The SparkContext&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=3&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;Using DataFrames&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=4&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Creating a SparkSession&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=5&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Viewing tables&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=6&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Are you query-ious?&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=7&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Pandafy a Spark DataFrame&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=8&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Put some Spark in your data&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=9&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Dropping the middle man&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,10,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-to-know-pyspark?ex=10&quot;]]],[&quot;^ &quot;,&quot;id&quot;,13844,&quot;^1R&quot;,null,&quot;^E&quot;,&quot;Manipulating data&quot;,&quot;^I&quot;,&quot;In this chapter, you&#39;ll learn about the pyspark.sql module, which provides optimized data queries to your Spark session.&quot;,&quot;^1S&quot;,2,&quot;^O&quot;,&quot;manipulating-data-2&quot;,&quot;^1T&quot;,12,&quot;^1U&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;,&quot;^1V&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;^R&quot;,&quot;27/04/2022&quot;,&quot;^1W&quot;,null,&quot;^1X&quot;,null,&quot;xp&quot;,1050,&quot;^1Y&quot;,0,&quot;^:&quot;,[[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Creating columns&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=1&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;SQL in a nutshell&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=2&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;SQL in a nutshell (2)&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=3&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Filtering Data&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=4&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Selecting&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=5&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Selecting II&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=6&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Aggregating&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=7&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Aggregating II&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=8&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Grouping and Aggregating I&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=9&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Grouping and Aggregating II&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,10,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=10&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;Joining&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,11,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=11&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Joining II&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,12,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=12&quot;]]],[&quot;^ &quot;,&quot;id&quot;,13845,&quot;^1R&quot;,null,&quot;^E&quot;,&quot;Getting started with machine learning pipelines&quot;,&quot;^I&quot;,&quot;PySpark has built-in, cutting-edge machine learning routines, along with utilities to create full machine learning pipelines. You&#39;ll learn about them in this chapter.&quot;,&quot;^1S&quot;,3,&quot;^O&quot;,&quot;getting-started-with-machine-learning-pipelines&quot;,&quot;^1T&quot;,14,&quot;^1U&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;,&quot;^1V&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;^R&quot;,&quot;27/04/2022&quot;,&quot;^1W&quot;,null,&quot;^1X&quot;,null,&quot;xp&quot;,1200,&quot;^1Y&quot;,0,&quot;^:&quot;,[[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;Machine Learning Pipelines&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=1&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Join the DataFrames&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=2&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;Data types&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=3&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;String to integer&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=4&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Create a new column&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=5&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Making a Boolean&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=6&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;Strings and factors&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=7&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Carrier&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=8&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Destination&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=9&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Assemble a vector&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,10,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=10&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Create the pipeline&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,11,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=11&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;Test vs. Train&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,12,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=12&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Transform the data&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,13,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=13&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Split the data&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,14,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/getting-started-with-machine-learning-pipelines?ex=14&quot;]]],[&quot;^ &quot;,&quot;id&quot;,13846,&quot;^1R&quot;,null,&quot;^E&quot;,&quot;Model tuning and selection&quot;,&quot;^I&quot;,&quot;In this last chapter, you&#39;ll apply what you&#39;ve learned to create a model that predicts which flights will be delayed.&quot;,&quot;^1S&quot;,4,&quot;^O&quot;,&quot;model-tuning-and-selection&quot;,&quot;^1T&quot;,9,&quot;^1U&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;,&quot;^1V&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;^R&quot;,&quot;27/04/2022&quot;,&quot;^1W&quot;,null,&quot;^1X&quot;,null,&quot;xp&quot;,750,&quot;^1Y&quot;,0,&quot;^:&quot;,[[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;What is logistic regression?&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=1&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Create the modeler&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=2&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;Cross validation&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=3&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Create the evaluator&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=4&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Make a grid&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=5&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Make the validator&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=6&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Fit the model(s)&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=7&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;Evaluating binary classifiers&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=8&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Evaluate the model&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/model-tuning-and-selection?ex=9&quot;]]]]]]]],&quot;^6&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedRequestRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;SUCCESS&quot;,&quot;^H&quot;,[&quot;^ &quot;,&quot;id&quot;,13844,&quot;^1R&quot;,null,&quot;^E&quot;,&quot;Manipulating data&quot;,&quot;^I&quot;,&quot;In this chapter, you&#39;ll learn about the pyspark.sql module, which provides optimized data queries to your Spark session.&quot;,&quot;^1S&quot;,2,&quot;^O&quot;,&quot;manipulating-data-2&quot;,&quot;^1T&quot;,12,&quot;^1U&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing.png&quot;,&quot;^1V&quot;,&quot;https://assets.datacamp.com/production/default/badges/missing_unc.png&quot;,&quot;^R&quot;,&quot;27/04/2022&quot;,&quot;^1W&quot;,null,&quot;^1X&quot;,null,&quot;xp&quot;,1050,&quot;^1Y&quot;,0,&quot;^:&quot;,[[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Creating columns&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,1,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=1&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;SQL in a nutshell&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,2,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=2&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;SQL in a nutshell (2)&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,3,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=3&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Filtering Data&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,4,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=4&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Selecting&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,5,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=5&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Selecting II&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,6,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=6&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Aggregating&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,7,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=7&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Aggregating II&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,8,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=8&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Grouping and Aggregating I&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,9,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=9&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Grouping and Aggregating II&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,10,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=10&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^E&quot;,&quot;Joining&quot;,&quot;^1Z&quot;,50,&quot;^1S&quot;,11,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=11&quot;],[&quot;^ &quot;,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^E&quot;,&quot;Joining II&quot;,&quot;^1Z&quot;,100,&quot;^1S&quot;,12,&quot;url&quot;,&quot;https://campus.datacamp.com/courses/introduction-to-pyspark/manipulating-data-2?ex=12&quot;]]]]]],&quot;^:&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedRequestRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;SUCCESS&quot;,&quot;^H&quot;,[[&quot;^ &quot;,&quot;id&quot;,159157,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;assignment&quot;,&quot;&lt;p&gt;In this chapter, you&#39;ll learn how to use the methods defined by Spark&#39;s &lt;code&gt;DataFrame&lt;/code&gt; class to perform common data operations.&lt;/p&gt;\\n&lt;p&gt;Let&#39;s look at performing column-wise operations. In Spark you can do this using the &lt;code&gt;.withColumn()&lt;/code&gt; method, which takes two arguments. First, a string with the name of your new column, and second the new column itself.&lt;/p&gt;\\n&lt;p&gt;The new column must be an object of class &lt;code&gt;Column&lt;/code&gt;. Creating one of these is as easy as extracting a column from your DataFrame using &lt;code&gt;df.colName&lt;/code&gt;.&lt;/p&gt;\\n&lt;p&gt;Updating a Spark DataFrame is somewhat different than working in &lt;code&gt;pandas&lt;/code&gt; because the Spark DataFrame is &lt;em&gt;immutable&lt;/em&gt;. This means that it can&#39;t be changed, and so columns can&#39;t be updated in place.&lt;/p&gt;\\n&lt;p&gt;Thus, all these methods return a new DataFrame. To overwrite the original DataFrame you must reassign the returned DataFrame using the method like so:&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;df = df.withColumn(\\&quot;newCol\\&quot;, df.oldCol + 1)\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;The above code creates a DataFrame with the same columns as &lt;code&gt;df&lt;/code&gt; plus a new column, &lt;code&gt;newCol&lt;/code&gt;, where every entry is equal to the corresponding entry from &lt;code&gt;oldCol&lt;/code&gt;, plus one.&lt;/p&gt;\\n&lt;p&gt;To overwrite an existing column, just pass the name of the column as the first argument!&lt;/p&gt;\\n&lt;p&gt;Remember, a &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace.&lt;/p&gt;&quot;,&quot;^E&quot;,&quot;Creating columns&quot;,&quot;sample_code&quot;,&quot;# Create the DataFrame flights\\nflights = spark.table(____)\\n\\n# Show the head\\n____.____()\\n\\n# Add duration_hrs\\nflights = flights.withColumn(____)&quot;,&quot;instructions&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Use the &lt;code&gt;spark.table()&lt;/code&gt; method with the argument &lt;code&gt;\\&quot;flights\\&quot;&lt;/code&gt; to create a DataFrame containing the values of the &lt;code&gt;flights&lt;/code&gt; table in the &lt;code&gt;.catalog&lt;/code&gt;. Save it as &lt;code&gt;flights&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Show the head of &lt;code&gt;flights&lt;/code&gt; using &lt;code&gt;flights.show()&lt;/code&gt;. Check the output: the column &lt;code&gt;air_time&lt;/code&gt; contains the duration of the flight in minutes.&lt;/li&gt;\\n&lt;li&gt;Update &lt;code&gt;flights&lt;/code&gt; to include a new column called &lt;code&gt;duration_hrs&lt;/code&gt;, that contains the duration of each flight in hours (you&#39;ll need to divide &lt;code&gt;air_time&lt;/code&gt; by the number of minutes in an hour).&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^1S&quot;,1,&quot;sct&quot;,&quot;# TODO: Nick, where did spark.table() come from?\\nEx().has_equal_ast(code=&#39;flights = spark.table(\\&quot;flights\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `flights` correctly?&#39;)\\nEx().has_equal_ast(code=&#39;flights.show()&#39;, exact=False, incorrect_msg=&#39;Did you show the head of `flights` correctly?&#39;)\\nEx().check_or(\\n    has_equal_ast(code=&#39;flights = flights.withColumn(\\&quot;duration_hrs\\&quot;, flights.air_time/60)&#39;, exact=False, incorrect_msg=&#39;Did you add `duration_hrs` to `flights` correctly?&#39;),\\n    has_equal_ast(code=&#39;flights = flights.withColumn(\\&quot;duration_hrs\\&quot;, flights.air_time/60.0)&#39;, exact=False, incorrect_msg=&#39;Did you add `duration_hrs` to `flights` correctly?&#39;)\\n)\\n\\nsuccess_msg(\\&quot;Good job! Now you can make new columns derived from the old ones!\\&quot;)&quot;,&quot;pre_exercise_code&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\ntemp = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header=True)\\ntemp.createOrReplaceTempView(\\&quot;flights\\&quot;)&quot;,&quot;solution&quot;,&quot;# Create the DataFrame flights\\nflights = spark.table(\\&quot;flights\\&quot;)\\n\\n# Show the head\\nflights.show()\\n\\n# Add duration_hrs\\nflights = flights.withColumn(\\&quot;duration_hrs\\&quot;, flights.air_time/60)&quot;,&quot;hint&quot;,&quot;&lt;p&gt;To get the duration of each flight in hours, you can do &lt;code&gt;flights.air_time/60&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;attachments&quot;,null,&quot;xp&quot;,100,&quot;possible_answers&quot;,[],&quot;feedbacks&quot;,[],&quot;question&quot;,&quot;&quot;,&quot;language&quot;,&quot;python&quot;,&quot;randomNumber&quot;,0.24881326612676036,&quot;externalId&quot;,159157],[&quot;^ &quot;,&quot;id&quot;,159158,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^1[&quot;,&quot;&lt;p&gt;As you move forward, it will help to have a basic understanding of SQL. A more in depth look can be found &lt;a href=\\&quot;https://www.datacamp.com/courses/intro-to-sql-for-data-science\\&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\\n&lt;p&gt;A SQL query returns a table derived from one or more tables contained in a database.&lt;/p&gt;\\n&lt;p&gt;Every SQL query is made up of commands that tell the database what you want to do with the data. The two commands that every query has to contain are &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;FROM&lt;/code&gt;.&lt;/p&gt;\\n&lt;p&gt;The &lt;code&gt;SELECT&lt;/code&gt; command is followed by the &lt;em&gt;columns&lt;/em&gt; you want in the resulting table.&lt;/p&gt;\\n&lt;p&gt;The &lt;code&gt;FROM&lt;/code&gt; command is followed by the name of the table that contains those columns. The minimal SQL query is:&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;SELECT * FROM my_table;\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; selects all columns, so this returns the entire table named &lt;code&gt;my_table&lt;/code&gt;.&lt;/p&gt;\\n&lt;p&gt;Similar to &lt;code&gt;.withColumn()&lt;/code&gt;, you can do column-wise computations within a &lt;code&gt;SELECT&lt;/code&gt; statement. For example,&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;SELECT origin, dest, air_time / 60 FROM flights;\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;returns a table with the origin, destination, and duration in hours for each flight.&lt;/p&gt;\\n&lt;p&gt;Another commonly used command is &lt;code&gt;WHERE&lt;/code&gt;. This command filters the rows of the table based on some logical condition you specify. The resulting table contains the rows where your condition is true. For example, if you had a table of students and grades you could do:&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;SELECT * FROM students\\nWHERE grade = &#39;A&#39;;\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;to select all the columns and the rows containing information about students who got As.&lt;/p&gt;\\n&lt;p&gt;&lt;hr&gt;\\nWhich of the following queries returns a table of tail numbers and destinations for flights that lasted more than 10 hours?&lt;/p&gt;&quot;,&quot;^E&quot;,&quot;SQL in a nutshell&quot;,&quot;^20&quot;,&quot;&quot;,&quot;^21&quot;,null,&quot;^1S&quot;,2,&quot;sct&quot;,&quot;&quot;,&quot;^22&quot;,&quot;&quot;,&quot;^23&quot;,&quot;&quot;,&quot;^24&quot;,&quot;&lt;p&gt;The &lt;code&gt;duration&lt;/code&gt; column contains the length of each flight in &lt;em&gt;minutes&lt;/em&gt;!&lt;/p&gt;&quot;,&quot;^25&quot;,null,&quot;xp&quot;,50,&quot;^26&quot;,[&quot;&lt;code&gt;SELECT dest, tail_num FROM flights WHERE air_time &amp;gt; 10;&lt;/code&gt;&quot;,&quot;[&lt;code&gt;SELECT dest, tail_num FROM flights WHERE air_time &amp;gt; 600;&lt;/code&gt;]&quot;,&quot;&lt;code&gt;SELECT * FROM flights WHERE air_time &amp;gt; 600;&lt;/code&gt;&quot;],&quot;^27&quot;,[&quot;That&#39;s almost right, but remember &lt;code&gt;air_time&lt;/code&gt; is measured in minutes.&quot;,&quot;Great work! You&#39;re a SQL wizard!&quot;,&quot;What columns does &lt;code&gt;SELECT *&lt;/code&gt; return?&quot;],&quot;^28&quot;,&quot;&quot;,&quot;key&quot;,&quot;cc169b3656&quot;,&quot;lang&quot;,&quot;python&quot;,&quot;skills&quot;,[2],&quot;^29&quot;,&quot;python&quot;,&quot;course_id&quot;,4452,&quot;chapter_id&quot;,13844,&quot;^17&quot;,&quot;spark&quot;,&quot;version&quot;,&quot;v0&quot;,&quot;^2:&quot;,0.6934397896888131,&quot;^2;&quot;,159158],[&quot;^ &quot;,&quot;id&quot;,159159,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^1[&quot;,&quot;&lt;p&gt;Another common database task is aggregation. That is, reducing your data by breaking it into chunks and summarizing each chunk.&lt;/p&gt;\\n&lt;p&gt;This is done in SQL using the &lt;code&gt;GROUP BY&lt;/code&gt; command. This command breaks your data into groups and applies a function from your &lt;code&gt;SELECT&lt;/code&gt; statement to each group.&lt;/p&gt;\\n&lt;p&gt;For example, if you wanted to count the number of flights from each of two origin destinations, you could use the query&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;SELECT COUNT(*) FROM flights\\nGROUP BY origin;\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;&lt;code&gt;GROUP BY origin&lt;/code&gt; tells SQL that you want the output to have a row for each unique value of the &lt;code&gt;origin&lt;/code&gt; column. The &lt;code&gt;SELECT&lt;/code&gt; statement selects the values you want to populate each of the columns. Here, we want to &lt;code&gt;COUNT()&lt;/code&gt; every row in each of the groups.&lt;/p&gt;\\n&lt;p&gt;It&#39;s possible to &lt;code&gt;GROUP BY&lt;/code&gt; more than one column. When you do this, the resulting table has a row for every combination of the unique values in each column. The following query counts the number of flights from SEA and PDX to every destination airport:&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;SELECT origin, dest, COUNT(*) FROM flights\\nGROUP BY origin, dest;\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;The output will have a row for every combination of the values in &lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; (i.e. a row listing each origin and destination that a flight flew to). There will also be a column with the &lt;code&gt;COUNT()&lt;/code&gt; of all the rows in each group.&lt;/p&gt;\\n&lt;p&gt;Remember, a more in depth look at SQL can be found &lt;a href=\\&quot;https://www.datacamp.com/courses/intro-to-sql-for-data-science\\&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\\n&lt;hr&gt;\\n&lt;p&gt;What information would this query get? Remember the &lt;code&gt;flights&lt;/code&gt; table holds information about flights that departed PDX and SEA in 2014 and 2015. Note that &lt;code&gt;AVG()&lt;/code&gt; function gets the average value of a column!&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;SELECT AVG(air_time) / 60 FROM flights\\nGROUP BY origin, carrier;\\n&lt;/code&gt;&lt;/pre&gt;&quot;,&quot;^E&quot;,&quot;SQL in a nutshell (2)&quot;,&quot;^20&quot;,&quot;&quot;,&quot;^21&quot;,null,&quot;^1S&quot;,3,&quot;sct&quot;,&quot;&quot;,&quot;^22&quot;,&quot;&quot;,&quot;^23&quot;,&quot;&quot;,&quot;^24&quot;,&quot;&lt;p&gt;Remember, &lt;code&gt;air_time&lt;/code&gt; is measured in minutes and &lt;code&gt;GROUP BY&lt;/code&gt; groups the data according to the column (or columns) that come after it.&lt;/p&gt;&quot;,&quot;^25&quot;,null,&quot;xp&quot;,50,&quot;^26&quot;,[&quot;[The average length of each airline&#39;s flights from SEA and from PDX in hours.]&quot;,&quot;The average length of each flight.&quot;,&quot;The average length of each airline&#39;s flights.&quot;],&quot;^27&quot;,[&quot;Awesome! You&#39;ve got this SQL stuff down!&quot;,&quot;Hm… what&#39;s the average length of a single flight?&quot;,&quot;That&#39;s almost right, but take a second look at the &lt;code&gt;GROUP BY&lt;/code&gt; statement.&quot;],&quot;^28&quot;,&quot;&quot;,&quot;key&quot;,&quot;2dcd635d41&quot;,&quot;^2&lt;&quot;,&quot;python&quot;,&quot;^2=&quot;,[2],&quot;^29&quot;,&quot;python&quot;,&quot;^2&gt;&quot;,4452,&quot;^2?&quot;,13844,&quot;^17&quot;,&quot;spark&quot;,&quot;^2@&quot;,&quot;v0&quot;,&quot;^2:&quot;,0.7283549552126058,&quot;^2;&quot;,159159],[&quot;^ &quot;,&quot;id&quot;,159160,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^1[&quot;,&quot;&lt;p&gt;Now that you have a bit of SQL know-how under your belt, it&#39;s easier to talk about the analogous operations using Spark DataFrames.&lt;/p&gt;\\n&lt;p&gt;Let&#39;s take a look at the &lt;code&gt;.filter()&lt;/code&gt; method. As you might suspect, this is the Spark counterpart of SQL&#39;s &lt;code&gt;WHERE&lt;/code&gt; clause. The &lt;code&gt;.filter()&lt;/code&gt; method takes either an expression that would follow the &lt;code&gt;WHERE&lt;/code&gt; clause of a SQL expression as a string, or a Spark Column of boolean (&lt;code&gt;True&lt;/code&gt;/&lt;code&gt;False&lt;/code&gt;) values.&lt;/p&gt;\\n&lt;p&gt;For example, the following two expressions will produce the same output:&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;flights.filter(\\&quot;air_time &amp;gt; 120\\&quot;).show()\\nflights.filter(flights.air_time &amp;gt; 120).show()\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;Notice that in the first case, we pass a &lt;em&gt;string&lt;/em&gt; to &lt;code&gt;.filter()&lt;/code&gt;. In SQL, we would write this filtering task as &lt;code&gt;SELECT * FROM flights WHERE air_time &amp;gt; 120&lt;/code&gt;. Spark&#39;s &lt;code&gt;.filter()&lt;/code&gt; can accept any expression that could go in the &lt;code&gt;WHERE&lt;/code&gt;clause of a SQL query (in this case, &lt;code&gt;\\&quot;air_time &amp;gt; 120\\&quot;&lt;/code&gt;), as long as it is passed as a string.\\nNotice that in this case, we do not reference the name of the table in the string -- as we wouldn&#39;t in the SQL request.&lt;/p&gt;\\n&lt;p&gt;In the second case, we actually pass a &lt;em&gt;column of boolean values&lt;/em&gt; to &lt;code&gt;.filter()&lt;/code&gt;. Remember that &lt;code&gt;flights.air_time &amp;gt; 120&lt;/code&gt; returns a column of boolean values that has &lt;code&gt;True&lt;/code&gt; in place of those records in &lt;code&gt;flights.air_time&lt;/code&gt; that are over 120, and &lt;code&gt;False&lt;/code&gt; otherwise.  &lt;/p&gt;\\n&lt;p&gt;Remember, a &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;^E&quot;,&quot;Filtering Data&quot;,&quot;^20&quot;,&quot;# Filter flights by passing a string\\nlong_flights1 = ____.____(\\&quot;____ &gt; ____\\&quot;)\\n\\n# Filter flights by passing a column of boolean values\\nlong_flights2 = ____.____(____.____ &gt; ____)\\n\\n# Print the data to check they&#39;re equal\\n____.____()\\n____.____()&quot;,&quot;^21&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Use the &lt;code&gt;.filter()&lt;/code&gt; method to find all the flights that flew over 1000 miles two ways:&lt;ul&gt;\\n&lt;li&gt;First, pass a SQL &lt;strong&gt;string&lt;/strong&gt; to &lt;code&gt;.filter()&lt;/code&gt; that checks whether the distance is greater than 1000. Save this as &lt;code&gt;long_flights1&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Then pass a column of boolean values to &lt;code&gt;.filter()&lt;/code&gt; that checks the same thing. Save this as &lt;code&gt;long_flights2&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;\\n&lt;li&gt;Use &lt;code&gt;.show()&lt;/code&gt; to print heads of both DataFrames and make sure they&#39;re actually equal!&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^1S&quot;,4,&quot;sct&quot;,&quot;# this is the best way to check all of these, promise:\\nEx().check_or(\\n    has_equal_ast(code=&#39;long_flights1 = flights.filter(\\&quot;distance &gt; 1000\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `long_flights1` correctly? Did you pass a **string** as the argument to the first call of `.filter()?&#39;),\\n    has_equal_ast(code=&#39;long_flights1 = flights.filter(\\&quot;distance&gt;1000\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `long_flights1` correctly? Did you pass a **string** as the argument to the first call of `.filter()?&#39;),\\n  has_equal_ast(code=&#39;long_flights1 = flights.filter(\\&quot;distance &gt;1000\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `long_flights1` correctly? Did you pass a **string** as the argument to the first call of `.filter()`?&#39;),\\n  has_equal_ast(code=&#39;long_flights1 = flights.filter(\\&quot;distance&gt; 1000\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `long_flights1` correctly? Did you pass a **string** as the argument to the first call of `.filter()?&#39;)\\n)\\n\\nEx().has_equal_ast(code=&#39;long_flights2 = flights.filter(flights.distance &gt; 1000)&#39;, exact=False, incorrect_msg=&#39;Did you define `long_flights2` correctly? Did you pass a column of boolean values as the argument to the second call of `.filter()`?&#39;)\\n\\nEx().has_equal_ast(code=&#39;long_flights1.show()&#39;, exact=False, incorrect_msg=&#39;Did you use .show() to examine `long_flights1`?&#39;)\\nEx().has_equal_ast(code=&#39;long_flights2.show()&#39;, exact=False, incorrect_msg=&#39;Did you use .show() to examine `long_flights2`?&#39;)\\n\\nsuccess_msg(\\&quot;Awesome! PySpark often provides a few different ways to get the same results.\\&quot;)&quot;,&quot;^22&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)&quot;,&quot;^23&quot;,&quot;# Filter flights by passing a string\\nlong_flights1 = flights.filter(\\&quot;distance &gt; 1000\\&quot;)\\n\\n# Filter flights by passing a column of boolean values\\nlong_flights2 = flights.filter(flights.distance &gt; 1000)\\n\\n# Print the data to check they&#39;re equal\\nlong_flights1.show()\\nlong_flights2.show()&quot;,&quot;^24&quot;,&quot;&lt;p&gt;Remember, you can generate a column of boolean values with &lt;code&gt;flights.distance &amp;gt; 1000&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;^25&quot;,null,&quot;xp&quot;,100,&quot;^26&quot;,[],&quot;^27&quot;,[],&quot;^28&quot;,&quot;&quot;,&quot;^29&quot;,&quot;python&quot;,&quot;^2:&quot;,0.7387314694601197,&quot;^2;&quot;,159160],[&quot;^ &quot;,&quot;id&quot;,159161,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^1[&quot;,&quot;&lt;p&gt;The Spark variant of SQL&#39;s &lt;code&gt;SELECT&lt;/code&gt; is the &lt;code&gt;.select()&lt;/code&gt; method. This method takes multiple arguments - one for each column you want to select. These arguments can either be the column name as a string (one for each column) or a column object (using the &lt;code&gt;df.colName&lt;/code&gt; syntax). When you pass a column object, you can perform operations like addition or subtraction on the column to change the data contained in it, much like inside &lt;code&gt;.withColumn()&lt;/code&gt;.&lt;/p&gt;\\n&lt;p&gt;The difference between &lt;code&gt;.select()&lt;/code&gt; and &lt;code&gt;.withColumn()&lt;/code&gt; methods is that &lt;code&gt;.select()&lt;/code&gt; returns only the columns you specify, while &lt;code&gt;.withColumn()&lt;/code&gt; returns all the columns of the DataFrame in addition to the one you defined. It&#39;s often a good idea to drop columns you don&#39;t need at the beginning of an operation so that you&#39;re not dragging around extra data as you&#39;re wrangling. In this case, you would use &lt;code&gt;.select()&lt;/code&gt; and not &lt;code&gt;.withColumn()&lt;/code&gt;.&lt;/p&gt;\\n&lt;p&gt;Remember, a SparkSession called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;^E&quot;,&quot;Selecting&quot;,&quot;^20&quot;,&quot;# Select the first set of columns\\nselected1 = flights.select(\\&quot;____\\&quot;, \\&quot;____\\&quot;, \\&quot;____\\&quot;)\\n\\n# Select the second set of columns\\ntemp = flights.select(____.____, ____.____, ____.____)\\n\\n# Define first filter\\nfilterA = flights.origin == \\&quot;SEA\\&quot;\\n\\n# Define second filter\\nfilterB = flights.dest == \\&quot;PDX\\&quot;\\n\\n# Filter the data, first by filterA then by filterB\\nselected2 = temp.filter(____).filter(____)&quot;,&quot;^21&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Select the columns &lt;code&gt;\\&quot;tailnum\\&quot;&lt;/code&gt;, &lt;code&gt;\\&quot;origin\\&quot;&lt;/code&gt;, and &lt;code&gt;\\&quot;dest\\&quot;&lt;/code&gt; from &lt;code&gt;flights&lt;/code&gt; by passing the column names as strings. Save this as &lt;code&gt;selected1&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Select the columns &lt;code&gt;\\&quot;origin\\&quot;&lt;/code&gt;, &lt;code&gt;\\&quot;dest\\&quot;&lt;/code&gt;, and &lt;code&gt;\\&quot;carrier\\&quot;&lt;/code&gt; using the &lt;code&gt;df.colName&lt;/code&gt; syntax and then filter the result using both of the filters already defined for you (&lt;code&gt;filterA&lt;/code&gt; and &lt;code&gt;filterB&lt;/code&gt;) to only keep flights from SEA to PDX. Save this as &lt;code&gt;selected2&lt;/code&gt;.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^1S&quot;,5,&quot;sct&quot;,&quot;Ex().has_equal_ast(code=&#39;selected1 = flights.select(\\&quot;tailnum\\&quot;, \\&quot;origin\\&quot;, \\&quot;dest\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you select the correct set of columns for `selected1`?&#39;) #use this check or otherwise a manual converter is necessary\\n\\nEx().has_equal_ast(code=&#39;temp = flights.select(flights.origin, flights.dest, flights.carrier)&#39;, exact=False, incorrect_msg=&#39;Did you select the correct set of columns for `temp`?&#39;)\\nEx().has_equal_ast(code=&#39;filterA = flights.origin == \\&quot;SEA\\&quot;&#39;, exact=False, incorrect_msg=\\&quot;Don&#39;t modify `filterA`\\&quot;)\\nEx().has_equal_ast(code=&#39;filterB = flights.dest == \\&quot;PDX\\&quot;&#39;, exact=False, incorrect_msg=\\&quot;Don&#39;t modify `filterB`\\&quot;)\\nEx().has_equal_ast(code=&#39;selected2 = temp.filter(filterA).filter(filterB)&#39;, exact=False, incorrect_msg=&#39;Did you filter the data for `selected2` correctly?&#39;)\\n\\nsuccess_msg(\\&quot;Great work! You&#39;re speeding right through this course!\\&quot;)&quot;,&quot;^22&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)&quot;,&quot;^23&quot;,&quot;# Select the first set of columns\\nselected1 = flights.select(\\&quot;tailnum\\&quot;, \\&quot;origin\\&quot;, \\&quot;dest\\&quot;)\\n\\n# Select the second set of columns\\ntemp = flights.select(flights.origin, flights.dest, flights.carrier)\\n\\n# Define first filter\\nfilterA = flights.origin == \\&quot;SEA\\&quot;\\n\\n# Define second filter\\nfilterB = flights.dest == \\&quot;PDX\\&quot;\\n\\n# Filter the data, first by filterA then by filterB\\nselected2 = temp.filter(filterA).filter(filterB)&quot;,&quot;^24&quot;,&quot;&lt;p&gt;Don&#39;t forget that you can select columns by calling &lt;code&gt;df.select(\\&quot;col1\\&quot;, df.col2)&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;^25&quot;,null,&quot;xp&quot;,100,&quot;^26&quot;,[],&quot;^27&quot;,[],&quot;^28&quot;,&quot;&quot;,&quot;^29&quot;,&quot;python&quot;,&quot;^2:&quot;,0.6250929420037736,&quot;^2;&quot;,159161],[&quot;^ &quot;,&quot;id&quot;,159162,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^1[&quot;,&quot;&lt;p&gt;Similar to SQL, you can also use the &lt;code&gt;.select()&lt;/code&gt; method to perform column-wise operations. When you&#39;re selecting a column using the &lt;code&gt;df.colName&lt;/code&gt; notation, you can perform any column operation and the &lt;code&gt;.select()&lt;/code&gt; method will return the transformed column. For example,&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;flights.select(flights.air_time/60)\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;returns a column of flight durations in hours instead of minutes. You can also use the &lt;code&gt;.alias()&lt;/code&gt; method to rename a column you&#39;re selecting. So if you wanted to &lt;code&gt;.select()&lt;/code&gt; the column &lt;code&gt;duration_hrs&lt;/code&gt; (which isn&#39;t in your DataFrame) you could do&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;flights.select((flights.air_time/60).alias(\\&quot;duration_hrs\\&quot;))\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;The equivalent Spark DataFrame method &lt;code&gt;.selectExpr()&lt;/code&gt; takes SQL expressions as a string:&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;flights.selectExpr(\\&quot;air_time/60 as duration_hrs\\&quot;)\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;with the SQL &lt;code&gt;as&lt;/code&gt; keyword being equivalent to the &lt;code&gt;.alias()&lt;/code&gt; method. To select multiple columns, you can pass multiple strings.&lt;/p&gt;\\n&lt;p&gt;Remember, a &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;^E&quot;,&quot;Selecting II&quot;,&quot;^20&quot;,&quot;# Define avg_speed\\navg_speed = (flights.____/(flights.____/60)).alias(\\&quot;____\\&quot;)\\n\\n# Select the correct columns\\nspeed1 = flights.select(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, avg_speed)\\n\\n# Create the same table using a SQL expression\\nspeed2 = flights.selectExpr(\\&quot;____\\&quot;, \\&quot;____\\&quot;, \\&quot;____\\&quot;, \\&quot;distance/(air_time/60) as ____\\&quot;)&quot;,&quot;^21&quot;,&quot;&lt;p&gt;Create a table of the average speed of each flight both ways.&lt;/p&gt;\\n&lt;ul&gt;\\n&lt;li&gt;Calculate average speed by dividing the &lt;code&gt;distance&lt;/code&gt; by the &lt;code&gt;air_time&lt;/code&gt; (converted to hours). Use the &lt;code&gt;.alias()&lt;/code&gt; method name this column &lt;code&gt;\\&quot;avg_speed\\&quot;&lt;/code&gt;. Save the output as the variable &lt;code&gt;avg_speed&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Select the columns &lt;code&gt;\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;&lt;/code&gt;, and &lt;code&gt;avg_speed&lt;/code&gt; (without quotes!). Save this as &lt;code&gt;speed1&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Create the same table using &lt;code&gt;.selectExpr()&lt;/code&gt; and a string containing a SQL expression. Save this as &lt;code&gt;speed2&lt;/code&gt;.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^1S&quot;,6,&quot;sct&quot;,&quot;Ex().has_equal_ast(code=&#39;avg_speed = (flights.distance/(flights.air_time/60)).alias(\\&quot;avg_speed\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `avg_speed` correctly?&#39;)\\nEx().has_equal_ast(code=&#39;speed1 = flights.select(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, avg_speed)&#39;, exact=False, incorrect_msg=&#39;Did you select the correct set of columns for `speed1`?&#39;)\\nEx().check_or(\\n    has_equal_ast(code=&#39;speed2 = flights.selectExpr(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, \\&quot;distance/(air_time/60) as avg_speed\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you use `.selectExpr()` correctly to define `speed2`?&#39;),\\n    has_equal_ast(code=&#39;speed2 = flights.selectExpr(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, \\&quot;distance/(air_time/60) AS avg_speed\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you use `.selectExpr()` correctly to define `speed2`?&#39;),\\n    has_equal_ast(code=&#39;speed2 = flights.selectExpr(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, \\&quot;distance / (air_time / 60) AS avg_speed\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you use `.selectExpr()` correctly to define `speed2`?&#39;)\\n)\\n\\nsuccess_msg(\\&quot;Wow! You&#39;re doing great!\\&quot;)&quot;,&quot;^22&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)&quot;,&quot;^23&quot;,&quot;# Define avg_speed\\navg_speed = (flights.distance/(flights.air_time/60)).alias(\\&quot;avg_speed\\&quot;)\\n\\n# Select the correct columns\\nspeed1 = flights.select(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, avg_speed)\\n\\n# Create the same table using a SQL expression\\nspeed2 = flights.selectExpr(\\&quot;origin\\&quot;, \\&quot;dest\\&quot;, \\&quot;tailnum\\&quot;, \\&quot;distance/(air_time/60) as avg_speed\\&quot;)&quot;,&quot;^24&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Use the &lt;code&gt;.alias()&lt;/code&gt; method to rename a Spark column.&lt;/li&gt;\\n&lt;li&gt;Use the &lt;code&gt;AS&lt;/code&gt; keyword in a SQL expression to rename a column.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^25&quot;,null,&quot;xp&quot;,100,&quot;^26&quot;,[],&quot;^27&quot;,[],&quot;^28&quot;,&quot;&quot;,&quot;^29&quot;,&quot;python&quot;,&quot;^2:&quot;,0.8885488502791608,&quot;^2;&quot;,159162],[&quot;^ &quot;,&quot;id&quot;,159163,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^1[&quot;,&quot;&lt;p&gt;All of the common aggregation methods, like &lt;code&gt;.min()&lt;/code&gt;, &lt;code&gt;.max()&lt;/code&gt;, and &lt;code&gt;.count()&lt;/code&gt; are &lt;code&gt;GroupedData&lt;/code&gt; methods. These are created by calling the &lt;code&gt;.groupBy()&lt;/code&gt; DataFrame method. You&#39;ll learn exactly what that means in a few exercises. For now, all you have to do to use these functions is call that method on your DataFrame. For example, to find the minimum value of a column, &lt;code&gt;col&lt;/code&gt;, in a DataFrame, &lt;code&gt;df&lt;/code&gt;, you could do&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;df.groupBy().min(\\&quot;col\\&quot;).show()\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;This creates a &lt;code&gt;GroupedData&lt;/code&gt; object (so you can use the &lt;code&gt;.min()&lt;/code&gt; method), then finds the minimum value in &lt;code&gt;col&lt;/code&gt;, and returns it as a DataFrame.&lt;/p&gt;\\n&lt;p&gt;Now you&#39;re ready to do some aggregating of your own!&lt;/p&gt;\\n&lt;p&gt;A &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;^E&quot;,&quot;Aggregating&quot;,&quot;^20&quot;,&quot;# Find the shortest flight from PDX in terms of distance\\nflights.filter(____.____ == ____).groupBy().____(____).show()\\n\\n# Find the longest flight from SEA in terms of air time\\nflights.filter(____).groupBy().____.show()&quot;,&quot;^21&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Find the length of the shortest (in terms of distance) flight that left PDX by first &lt;code&gt;.filter()&lt;/code&gt;ing and using the &lt;code&gt;.min()&lt;/code&gt; method. Perform the filtering by referencing the column directly, not passing a SQL string.&lt;/li&gt;\\n&lt;li&gt;Find the length of the longest (in terms of time) flight that left SEA by &lt;code&gt;filter()&lt;/code&gt;ing and using the &lt;code&gt;.max()&lt;/code&gt; method. Perform the filtering by referencing the column directly, not passing a SQL string.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^1S&quot;,7,&quot;sct&quot;,&quot;Ex().check_or(\\n    has_equal_ast(code=&#39;flights.filter(flights.origin == \\&quot;PDX\\&quot;).groupBy().min(\\&quot;distance\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you filter flights to find the shortest flight from PDX by _referencing the column direcly_? Did you find the minimal `distance`?&#39;),\\n    has_equal_ast(code=&#39;flights.filter(\\&quot;origin == \\\\&#39;PDX\\\\&#39;\\&quot;).groupBy().min(\\&quot;distance\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you filter flights to find the shortest flight from PDX by _referencing the column direcly_? Did you find the minimal `distance`?&#39;)\\n)\\n\\nEx().check_or(\\n    has_equal_ast(code=&#39;flights.filter(flights.origin == \\&quot;SEA\\&quot;).groupBy().max(\\&quot;air_time\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you filter flights to find the longest flight from SEA by _referencing a column directly_? Did you find the maximal `air_time`?&#39;),\\n    has_equal_ast(code=&#39;flights.filter(\\&quot;origin == \\\\&#39;SEA\\\\&#39;\\&quot;).groupBy().max(\\&quot;air_time\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you filter flights to find the longest flight from SEA by _referencing the column direcly_? Did you find the maximal `air_time`?&#39;)\\n)\\n\\nsuccess_msg(\\&quot;Fantastic work! How do these methods help you learn about your data?\\&quot;)&quot;,&quot;^22&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)\\nflights = flights.withColumn(\\&quot;distance\\&quot;, flights.distance.cast(\\&quot;integer\\&quot;)).\\\\\\nwithColumn(\\&quot;air_time\\&quot;, flights.air_time.cast(\\&quot;integer\\&quot;))&quot;,&quot;^23&quot;,&quot;# Find the shortest flight from PDX in terms of distance\\nflights.filter(flights.origin == \\&quot;PDX\\&quot;).groupBy().min(\\&quot;distance\\&quot;).show()\\n\\n# Find the longest flight from SEA in terms of air time\\nflights.filter(flights.origin == \\&quot;SEA\\&quot;).groupBy().max(\\&quot;air_time\\&quot;).show()&quot;,&quot;^24&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Make sure that you pass a &lt;em&gt;logical column&lt;/em&gt; as an argument to filter (e.g. &lt;code&gt;filter(df.col &amp;lt; 2)&lt;/code&gt;), not a string.&lt;/li&gt;\\n&lt;li&gt;The &lt;code&gt;.min()&lt;/code&gt; and &lt;code&gt;.max()&lt;/code&gt; methods, however, take the name of a column as a &lt;em&gt;string&lt;/em&gt;, e.g. &lt;code&gt;max(\\&quot;col\\&quot;)&lt;/code&gt;.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^25&quot;,null,&quot;xp&quot;,100,&quot;^26&quot;,[],&quot;^27&quot;,[],&quot;^28&quot;,&quot;&quot;,&quot;^29&quot;,&quot;python&quot;,&quot;^2:&quot;,0.21279066290421045,&quot;^2;&quot;,159163],[&quot;^ &quot;,&quot;id&quot;,159164,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^1[&quot;,&quot;&lt;p&gt;To get you familiar with more of the built in aggregation methods, here&#39;s a few more exercises involving the &lt;code&gt;flights&lt;/code&gt; table!&lt;/p&gt;\\n&lt;p&gt;Remember, a &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;^E&quot;,&quot;Aggregating II&quot;,&quot;^20&quot;,&quot;# Average duration of Delta flights\\nflights.filter(____.____ == \\&quot;____\\&quot;).filter(____.____ == \\&quot;____\\&quot;).groupBy().avg(\\&quot;____\\&quot;).show()\\n\\n# Total hours in the air\\nflights.withColumn(\\&quot;____\\&quot;, flights.air_time/60).groupBy().sum(\\&quot;____\\&quot;).show()&quot;,&quot;^21&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Use the &lt;code&gt;.avg()&lt;/code&gt; method to get the average air time of Delta Airlines flights (where the &lt;code&gt;carrier&lt;/code&gt; column has the value &lt;code&gt;\\&quot;DL\\&quot;&lt;/code&gt;) that left SEA. The place of departure is stored in the column &lt;code&gt;origin&lt;/code&gt;. &lt;code&gt;show()&lt;/code&gt; the result.&lt;/li&gt;\\n&lt;li&gt;Use the &lt;code&gt;.sum()&lt;/code&gt; method to get the total number of hours all planes in this dataset spent in the air by creating a column called &lt;code&gt;duration_hrs&lt;/code&gt; from the column &lt;code&gt;air_time&lt;/code&gt;. &lt;code&gt;show()&lt;/code&gt; the result.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^1S&quot;,8,&quot;sct&quot;,&quot;Ex().check_or(\\n    has_equal_ast(code=&#39;flights.filter(flights.carrier == \\&quot;DL\\&quot;).filter(flights.origin == \\&quot;SEA\\&quot;).groupBy().avg(\\&quot;air_time\\&quot;).show()&#39;, exact=False, incorrect_msg=&#39;Did you calculate the average air time of Delta flights correctly?&#39;),\\n    has_equal_ast(code=&#39;flights.filter(flights.origin == \\&quot;SEA\\&quot;).filter(flights.carrier == \\&quot;DL\\&quot;).groupBy().avg(\\&quot;air_time\\&quot;).show()&#39;, exact=False, incorrect_msg=&#39;Did you calculate the average air time of Delta flights correctly?&#39;),\\n  \\thas_equal_ast(code = &#39;flights.filter(\\\\&#39;carrier = \\&quot;DL\\&quot;\\\\&#39;).filter(\\\\&#39;origin = \\&quot;SEA\\&quot;\\\\&#39;).groupBy().avg(\\&quot;air_time\\&quot;).show()&#39;, exact=False, incorrect_msg=&#39;Did you calculate the average air time of Delta flights correctly?&#39;),\\n\\thas_equal_ast(code = &#39;flights.filter(\\\\&#39;origin = \\&quot;SEA\\&quot;\\\\&#39;).filter(\\\\&#39;carrier = \\&quot;DL\\&quot;\\\\&#39;).groupBy().avg(\\&quot;air_time\\&quot;).show()&#39;, exact=False, incorrect_msg = \\&quot;Did you calculate the average air time of Delta flights correctly?\\&quot;)\\n)\\n\\nEx().has_equal_ast(code=&#39;flights.withColumn(\\&quot;duration_hrs\\&quot;, flights.air_time/60).groupBy().sum(\\&quot;duration_hrs\\&quot;).show()&#39;, exact=False, incorrect_msg=&#39;Did you `sum()` the total air time correctly?&#39;)\\n\\nsuccess_msg(\\&quot;Stellar job! Now you can answer some interesting questions about the data.\\&quot;)&quot;,&quot;^22&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)\\nflights = flights.withColumn(\\&quot;distance\\&quot;, flights.distance.cast(\\&quot;integer\\&quot;)).\\\\\\nwithColumn(\\&quot;air_time\\&quot;, flights.air_time.cast(\\&quot;integer\\&quot;))&quot;,&quot;^23&quot;,&quot;# Average duration of Delta flights\\nflights.filter(flights.carrier == \\&quot;DL\\&quot;).filter(flights.origin == \\&quot;SEA\\&quot;).groupBy().avg(\\&quot;air_time\\&quot;).show()\\n\\n# Total hours in the air\\nflights.withColumn(\\&quot;duration_hrs\\&quot;, flights.air_time/60).groupBy().sum(\\&quot;duration_hrs\\&quot;).show()&quot;,&quot;^24&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Use two logical conditions to filter the data, one matching the carrier code &lt;code&gt;\\&quot;DL\\&quot;&lt;/code&gt; and the other matching the airport code &lt;code&gt;SEA&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Create the column &lt;code&gt;duration_hrs&lt;/code&gt; and pass that as a string to the &lt;code&gt;.sum()&lt;/code&gt; method.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^25&quot;,null,&quot;xp&quot;,100,&quot;^26&quot;,[],&quot;^27&quot;,[],&quot;^28&quot;,&quot;&quot;,&quot;^29&quot;,&quot;python&quot;,&quot;^2:&quot;,0.8795148377122781,&quot;^2;&quot;,159164],[&quot;^ &quot;,&quot;id&quot;,159165,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^1[&quot;,&quot;&lt;p&gt;Part of what makes aggregating so powerful is the addition of groups. PySpark has a whole class devoted to grouped data frames: &lt;code&gt;pyspark.sql.GroupedData&lt;/code&gt;, which you saw in the last two exercises.&lt;/p&gt;\\n&lt;p&gt;You&#39;ve learned how to create a grouped DataFrame by calling the &lt;code&gt;.groupBy()&lt;/code&gt; method on a DataFrame with no arguments.&lt;/p&gt;\\n&lt;p&gt;Now you&#39;ll see that when you pass the name of one or more columns in your DataFrame to the &lt;code&gt;.groupBy()&lt;/code&gt; method, the aggregation methods behave like when you use a &lt;code&gt;GROUP BY&lt;/code&gt; statement in a SQL query!&lt;/p&gt;\\n&lt;p&gt;Remember, a &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;^E&quot;,&quot;Grouping and Aggregating I&quot;,&quot;^20&quot;,&quot;# Group by tailnum\\nby_plane = flights.groupBy(\\&quot;____\\&quot;)\\n\\n# Number of flights each plane made\\nby_plane.____.show()\\n\\n# Group by origin\\nby_origin = flights.groupBy(\\&quot;____\\&quot;)\\n\\n# Average duration of flights from PDX and SEA\\nby_origin.avg(\\&quot;____\\&quot;).show()&quot;,&quot;^21&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Create a DataFrame called &lt;code&gt;by_plane&lt;/code&gt; that is grouped by the column &lt;code&gt;tailnum&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Use the &lt;code&gt;.count()&lt;/code&gt; method with no arguments to count the number of flights each plane made.&lt;/li&gt;\\n&lt;li&gt;Create a DataFrame called &lt;code&gt;by_origin&lt;/code&gt; that is grouped by the column &lt;code&gt;origin&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Find the &lt;code&gt;.avg()&lt;/code&gt; of the &lt;code&gt;air_time&lt;/code&gt; column to find average duration of flights from PDX and SEA.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^1S&quot;,9,&quot;sct&quot;,&quot;Ex().has_equal_ast(code=&#39;by_plane = flights.groupBy(\\&quot;tailnum\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `by_plane` correctly? Be sure to check your argument to `.groupBy()`.&#39;)\\nEx().has_equal_ast(code=&#39;by_origin = flights.groupBy(\\&quot;origin\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `by_origin` correctly? Be sure to check your argument to `.groupBy()`.&#39;)\\nEx().has_equal_ast(code=&#39;by_plane.count().show()&#39;, exact=False, incorrect_msg=&#39;Did you `count()` the number of flights correctly?&#39;)\\nEx().has_equal_ast(code=&#39;by_origin.avg(\\&quot;air_time\\&quot;).show()&#39;, exact=False, incorrect_msg=&#39;Did you compute the average air time correctly?&#39;)\\n\\nsuccess_msg(\\&quot;Great work! You&#39;re passing with flying colors!\\&quot;)&quot;,&quot;^22&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)\\nflights = flights.withColumn(\\&quot;distance\\&quot;, flights.distance.cast(\\&quot;integer\\&quot;)).\\\\\\nwithColumn(\\&quot;air_time\\&quot;, flights.air_time.cast(\\&quot;integer\\&quot;))&quot;,&quot;^23&quot;,&quot;# Group by tailnum\\nby_plane = flights.groupBy(\\&quot;tailnum\\&quot;)\\n\\n# Number of flights each plane made\\nby_plane.count().show()\\n\\n# Group by origin\\nby_origin = flights.groupBy(\\&quot;origin\\&quot;)\\n\\n# Average duration of flights from PDX and SEA\\nby_origin.avg(\\&quot;air_time\\&quot;).show()&quot;,&quot;^24&quot;,&quot;&lt;p&gt;The &lt;code&gt;.groupBy()&lt;/code&gt; and &lt;code&gt;.avg()&lt;/code&gt; methods take the name of a column as a string. The &lt;code&gt;.count()&lt;/code&gt; method takes no arguments.&lt;/p&gt;&quot;,&quot;^25&quot;,null,&quot;xp&quot;,100,&quot;^26&quot;,[],&quot;^27&quot;,[],&quot;^28&quot;,&quot;&quot;,&quot;^29&quot;,&quot;python&quot;,&quot;^2:&quot;,0.7643468477522732,&quot;^2;&quot;,159165],[&quot;^ &quot;,&quot;id&quot;,159166,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^1[&quot;,&quot;&lt;p&gt;In addition to the &lt;code&gt;GroupedData&lt;/code&gt; methods you&#39;ve already seen, there is also the &lt;code&gt;.agg()&lt;/code&gt; method.\\nThis method lets you pass an aggregate column expression that uses any of the aggregate functions from the &lt;code&gt;pyspark.sql.functions&lt;/code&gt; submodule.&lt;/p&gt;\\n&lt;p&gt;This submodule contains many useful functions for computing things like standard deviations. All the aggregation functions in this submodule take the name of a column in a &lt;code&gt;GroupedData&lt;/code&gt; table.&lt;/p&gt;\\n&lt;p&gt;Remember, a &lt;code&gt;SparkSession&lt;/code&gt; called &lt;code&gt;spark&lt;/code&gt; is already in your workspace, along with the Spark DataFrame &lt;code&gt;flights&lt;/code&gt;. The grouped DataFrames you created in the last exercise are also in your workspace.&lt;/p&gt;&quot;,&quot;^E&quot;,&quot;Grouping and Aggregating II&quot;,&quot;^20&quot;,&quot;# Import pyspark.sql.functions as F\\nimport ____ as F\\n\\n# Group by month and dest\\nby_month_dest = flights.groupBy(____)\\n\\n# Average departure delay by month and destination\\nby_month_dest.____.show()\\n\\n# Standard deviation of departure delay\\nby_month_dest.agg(F.____(____)).show()&quot;,&quot;^21&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Import the submodule &lt;code&gt;pyspark.sql.functions&lt;/code&gt; as &lt;code&gt;F&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Create a &lt;code&gt;GroupedData&lt;/code&gt; table called &lt;code&gt;by_month_dest&lt;/code&gt; that&#39;s grouped by both the &lt;code&gt;month&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; columns. Refer to the two columns by passing both strings as separate arguments.&lt;/li&gt;\\n&lt;li&gt;Use the &lt;code&gt;.avg()&lt;/code&gt; method on the &lt;code&gt;by_month_dest&lt;/code&gt; DataFrame to get the average &lt;code&gt;dep_delay&lt;/code&gt; in each month for each destination.&lt;/li&gt;\\n&lt;li&gt;Find the standard deviation of &lt;code&gt;dep_delay&lt;/code&gt; by using the &lt;code&gt;.agg()&lt;/code&gt; method with the function &lt;code&gt;F.stddev()&lt;/code&gt;.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^1S&quot;,10,&quot;sct&quot;,&quot;# Ex().has_equal_ast(code=&#39;import pyspark.sql.functions as F&#39;, exact=False, incorrect_msg=&#39;Did you import `pyspark.sql.functions` correctly?&#39;)\\nEx().has_import(\\&quot;pyspark.sql.functions\\&quot;, same_as=True, not_imported_msg=&#39;Did you import `pyspark.sql.functions` correctly?&#39;)\\n\\nEx().has_equal_ast(code=&#39;by_month_dest = flights.groupBy(\\&quot;month\\&quot;, \\&quot;dest\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `by_month_dest` correctly?&#39;)\\nEx().has_equal_ast(code=&#39;by_month_dest.avg(\\&quot;dep_delay\\&quot;).show()&#39;, exact=False, incorrect_msg=&#39;Did you call `.avg()` correctly? Did you average over the correct column?&#39;)\\nEx().has_equal_ast(code=&#39;by_month_dest.agg(F.stddev(\\&quot;dep_delay\\&quot;)).show()&#39;, exact=False, incorrect_msg=&#39;Did you call `stddev()` correctly?&#39;)\\n\\nsuccess_msg(\\&quot;Amazing! You&#39;re learning so much from just a few simple methods!\\&quot;)&quot;,&quot;^22&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)\\nflights = flights.withColumn(\\&quot;distance\\&quot;, flights.distance.cast(\\&quot;integer\\&quot;)).\\\\\\nwithColumn(\\&quot;dep_delay\\&quot;, flights.dep_delay.cast(\\&quot;integer\\&quot;))&quot;,&quot;^23&quot;,&quot;# Import pyspark.sql.functions as F\\nimport pyspark.sql.functions as F\\n\\n# Group by month and dest\\nby_month_dest = flights.groupBy(\\&quot;month\\&quot;, \\&quot;dest\\&quot;)\\n\\n# Average departure delay by month and destination\\nby_month_dest.avg(\\&quot;dep_delay\\&quot;).show()\\n\\n# Standard deviation of departure delay\\nby_month_dest.agg(F.stddev(\\&quot;dep_delay\\&quot;)).show()&quot;,&quot;^24&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;The &lt;code&gt;.groupBy()&lt;/code&gt; method can take as many columns as arguments as you want.&lt;/li&gt;\\n&lt;li&gt;Use &lt;code&gt;.agg()&lt;/code&gt; by calling &lt;code&gt;grouped_df.agg(F.____(\\&quot;col\\&quot;))&lt;/code&gt;.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^25&quot;,null,&quot;xp&quot;,100,&quot;^26&quot;,[],&quot;^27&quot;,[],&quot;^28&quot;,&quot;&quot;,&quot;^29&quot;,&quot;python&quot;,&quot;^2:&quot;,0.5365042294499203,&quot;^2;&quot;,159166],[&quot;^ &quot;,&quot;id&quot;,159167,&quot;^U&quot;,&quot;PureMultipleChoiceExercise&quot;,&quot;^1[&quot;,&quot;&lt;p&gt;Another very common data operation is the &lt;em&gt;join&lt;/em&gt;. Joins are a whole topic unto themselves, so in this course we&#39;ll just look at simple joins. If you&#39;d like to learn more about joins, you can take a look &lt;a href=\\&quot;https://www.datacamp.com/courses/joining-data-with-pandas\\&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;\\n&lt;p&gt;A join will combine two different tables along a column that they share. This column is called the &lt;em&gt;key&lt;/em&gt;. Examples of keys here include the &lt;code&gt;tailnum&lt;/code&gt; and &lt;code&gt;carrier&lt;/code&gt; columns from the &lt;code&gt;flights&lt;/code&gt; table.&lt;/p&gt;\\n&lt;p&gt;For example, suppose that you want to know more information about the plane that flew a flight than just the tail number. This information isn&#39;t in the &lt;code&gt;flights&lt;/code&gt; table because the same plane flies many different flights over the course of two years, so including this information in every row would result in a lot of duplication. To avoid this, you&#39;d have a second table that has only one row for each plane and whose columns list all the information about the plane, including its tail number. You could call this table &lt;code&gt;planes&lt;/code&gt;&lt;/p&gt;\\n&lt;p&gt;When you join the &lt;code&gt;flights&lt;/code&gt; table to this table of airplane information, you&#39;re adding all the columns from the &lt;code&gt;planes&lt;/code&gt; table to the &lt;code&gt;flights&lt;/code&gt; table. To fill these columns with information, you&#39;ll look at the tail number from the &lt;code&gt;flights&lt;/code&gt; table and find the matching one in the &lt;code&gt;planes&lt;/code&gt; table, and then use that row to fill out all the new columns.&lt;/p&gt;\\n&lt;p&gt;Now you&#39;ll have a much bigger table than before, but now every row has all information about the plane that flew that flight!&lt;/p&gt;\\n&lt;hr&gt;\\n&lt;p&gt;Which of the following is &lt;strong&gt;not&lt;/strong&gt; true?&lt;/p&gt;&quot;,&quot;^E&quot;,&quot;Joining&quot;,&quot;^20&quot;,&quot;&quot;,&quot;^21&quot;,null,&quot;^1S&quot;,11,&quot;sct&quot;,&quot;&quot;,&quot;^22&quot;,&quot;&quot;,&quot;^23&quot;,&quot;&quot;,&quot;^24&quot;,&quot;&lt;p&gt;All the different kinds of joins take columns from one table and add them to columns in another table by matching them on a key.&lt;/p&gt;&quot;,&quot;^25&quot;,null,&quot;xp&quot;,50,&quot;^26&quot;,[&quot;Joins combine tables.&quot;,&quot;Joins add information to a table.&quot;,&quot;Storing information in separate tables can reduce repetition.&quot;,&quot;[There is only one kind of join.]&quot;],&quot;^27&quot;,[&quot;A join adds information from one table to another table.&quot;,&quot;Joins combine two tables, so the output should have more information in it than the input.&quot;,&quot;Putting all your data in a single table can mean having to repeat a lot of values. Think about how planes make many flights.&quot;,&quot;Great job! If there were only one kind of join, it would be tough to create some more complicated kinds of tables.&quot;],&quot;^28&quot;,&quot;&quot;,&quot;key&quot;,&quot;2aa88e551e&quot;,&quot;^2&lt;&quot;,&quot;python&quot;,&quot;^2=&quot;,[2],&quot;^29&quot;,&quot;python&quot;,&quot;^2&gt;&quot;,4452,&quot;^2?&quot;,13844,&quot;^17&quot;,&quot;spark&quot;,&quot;^2@&quot;,&quot;v0&quot;,&quot;^2:&quot;,0.27013505242186553,&quot;^2;&quot;,159167],[&quot;^ &quot;,&quot;id&quot;,159168,&quot;^U&quot;,&quot;SingleProcessExercise&quot;,&quot;^1[&quot;,&quot;&lt;p&gt;In PySpark, joins are performed using the DataFrame method &lt;code&gt;.join()&lt;/code&gt;. This method takes three arguments. The first is the second DataFrame that you want to join with the first one. The second argument, &lt;code&gt;on&lt;/code&gt;, is the name of the key column(s) as a string. The names of the key column(s) must be the same in each table. The third argument, &lt;code&gt;how&lt;/code&gt;, specifies the kind of join to perform. In this course we&#39;ll always use the value &lt;code&gt;how=\\&quot;leftouter\\&quot;&lt;/code&gt;.&lt;/p&gt;\\n&lt;p&gt;The &lt;code&gt;flights&lt;/code&gt; dataset and a new dataset called &lt;code&gt;airports&lt;/code&gt; are already in your workspace.&lt;/p&gt;&quot;,&quot;^E&quot;,&quot;Joining II&quot;,&quot;^20&quot;,&quot;# Examine the data\\nprint(____)\\n\\n# Rename the faa column\\nairports = ____\\n\\n# Join the DataFrames\\nflights_with_airports = ____\\n\\n# Examine the new DataFrame\\nprint(____)&quot;,&quot;^21&quot;,&quot;&lt;ul&gt;\\n&lt;li&gt;Examine the &lt;code&gt;airports&lt;/code&gt; DataFrame by calling &lt;code&gt;.show()&lt;/code&gt;. Note which key column will let you join &lt;code&gt;airports&lt;/code&gt; to the &lt;code&gt;flights&lt;/code&gt; table.&lt;/li&gt;\\n&lt;li&gt;Rename the &lt;code&gt;faa&lt;/code&gt; column in &lt;code&gt;airports&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt; by re-assigning the result of &lt;code&gt;airports.withColumnRenamed(\\&quot;faa\\&quot;, \\&quot;dest\\&quot;)&lt;/code&gt; to &lt;code&gt;airports&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;Join the &lt;code&gt;flights&lt;/code&gt; with the &lt;code&gt;airports&lt;/code&gt; DataFrame on the &lt;code&gt;dest&lt;/code&gt; column by calling the &lt;code&gt;.join()&lt;/code&gt; method on &lt;code&gt;flights&lt;/code&gt;. Save the result as &lt;code&gt;flights_with_airports&lt;/code&gt;.&lt;ul&gt;\\n&lt;li&gt;The first argument should be the other DataFrame, &lt;code&gt;airports&lt;/code&gt;.&lt;/li&gt;\\n&lt;li&gt;The argument &lt;code&gt;on&lt;/code&gt; should be the key column.&lt;/li&gt;\\n&lt;li&gt;The argument &lt;code&gt;how&lt;/code&gt; should be &lt;code&gt;\\&quot;leftouter\\&quot;&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;\\n&lt;li&gt;Call &lt;code&gt;.show()&lt;/code&gt; on &lt;code&gt;flights_with_airports&lt;/code&gt; to examine the data again. Note the new information that has been added.&lt;/li&gt;\\n&lt;/ul&gt;&quot;,&quot;^1S&quot;,12,&quot;sct&quot;,&quot;Ex().has_equal_ast(code=&#39;airports.show()&#39;, exact=False, incorrect_msg=&#39;Did you print` airports` correctly?&#39;)\\n\\n# Ex().has_equal_ast(code=&#39;airports = airports.withColumnRenamed(\\&quot;faa\\&quot;, \\&quot;dest\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `airports` correctly?&#39;)\\nEx().check_function(&#39;airports.withColumnRenamed&#39;).multi(\\n    check_args(0).has_equal_ast(),\\n  \\tcheck_args(1).has_equal_ast()\\n)\\n\\n# Ex().has_equal_ast(code=&#39;flights_with_airports = flights.join(airports, on=\\&quot;dest\\&quot;, how=\\&quot;leftouter\\&quot;)&#39;, exact=False, incorrect_msg=&#39;Did you define `flights_with_airports` correctly?&#39;)\\nEx().check_function(&#39;flights.join&#39;).multi(\\n    check_args(0).has_equal_ast(),\\n    check_args(&#39;on&#39;).has_equal_ast(),\\n    check_args(&#39;how&#39;).has_equal_ast()\\n)\\nEx().has_equal_ast(code=&#39;flights_with_airports.show()&#39;, exact=False, incorrect_msg=&#39;Did you print `flights_with_airports` correctly?&#39;)\\n\\nsuccess_msg(\\&quot;Fantastic work! You&#39;re a data manipulation pro!\\&quot;)&quot;,&quot;^22&quot;,&quot;_init_spark = &#39;/home/repl/.init-spark.py&#39;\\nwith open(_init_spark) as f:\\n    code = compile(f.read(), _init_spark, &#39;exec&#39;)\\n    exec(code)\\n\\nflights = spark.read.csv(\\&quot;/usr/local/share/datasets/flights.csv\\&quot;, header = True)\\nairports = spark.read.csv(\\&quot;/usr/local/share/datasets/airports.csv\\&quot;, header = True)&quot;,&quot;^23&quot;,&quot;# Examine the data\\nairports.show()\\n\\n# Rename the faa column\\nairports = airports.withColumnRenamed(\\&quot;faa\\&quot;, \\&quot;dest\\&quot;)\\n\\n# Join the DataFrames\\nflights_with_airports = flights.join(airports, on=\\&quot;dest\\&quot;, how=\\&quot;leftouter\\&quot;)\\n\\n# Examine the new DataFrame\\nflights_with_airports.show()&quot;,&quot;^24&quot;,&quot;&lt;p&gt;Make sure the key columns have the same name and that you&#39;ve specified all three arguments to &lt;code&gt;.join()&lt;/code&gt;.&lt;/p&gt;&quot;,&quot;^25&quot;,null,&quot;xp&quot;,100,&quot;^26&quot;,[],&quot;^27&quot;,[],&quot;^28&quot;,&quot;&quot;,&quot;^29&quot;,&quot;python&quot;,&quot;^2:&quot;,0.6272933990293248,&quot;^2;&quot;,159168]]]]],&quot;activeImage&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedRequestRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;SUCCESS&quot;,&quot;^H&quot;,&quot;course-4452-master:132491337cf65090139a1c4d9a807533-20220427091410144&quot;]]],&quot;sharedImage&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedRequestRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;NOT_FETCHED&quot;,&quot;^H&quot;,null]]],&quot;^D&quot;,[&quot;^0&quot;,[&quot;^ &quot;,&quot;n&quot;,&quot;PreFetchedRequestRecord&quot;,&quot;v&quot;,[&quot;^ &quot;,&quot;^G&quot;,&quot;SUCCESS&quot;,&quot;^H&quot;,[&quot;^ &quot;,&quot;key&quot;,&quot;python-course-notes-boilerplate&quot;,&quot;^E&quot;,&quot;Course Notes: Introduction to PySpark&quot;]]]]]]],&quot;settings&quot;,[&quot;^2&quot;,[&quot;uiTheme&quot;,&quot;DARK&quot;,&quot;feedbackRatingStatus&quot;,&quot;NONE&quot;]],&quot;streakInfo&quot;,[&quot;^ &quot;,&quot;^U&quot;,&quot;StreakUnknown&quot;],&quot;systemStatus&quot;,[&quot;^2&quot;,[&quot;indicator&quot;,&quot;none&quot;,&quot;description&quot;,&quot;No status has been fetched from the Status Page.&quot;]],&quot;user&quot;,[&quot;^2&quot;,[&quot;status&quot;,&quot;not_initiate&quot;,&quot;settings&quot;,[&quot;^2&quot;,[]]]]]]]";</script><div id="root"><div class="theme progress-indicator--visible"><style data-emotion="css p4fmi8">.css-p4fmi8{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:#F7F3EB;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;height:50px;padding-left:10px;padding-right:10px;position:relative;z-index:15;}</style><header data-cy="alpa-navbar" class="css-p4fmi8"><style data-emotion="css yp9swi">.css-yp9swi{-webkit-flex:1;-ms-flex:1;flex:1;}</style><div class="css-yp9swi"><style data-emotion="css ew67gc">.css-ew67gc{border:0;border-width:0;padding:6px;}</style><style data-emotion="css 1jcub2v">.css-1jcub2v{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border:0;border-radius:4px;border-style:solid;border-width:2px;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;position:relative;-webkit-text-decoration:none;text-decoration:none;text-transform:capitalize;-webkit-transition:0.15s;transition:0.15s;vertical-align:baseline;white-space:nowrap;background-color:transparent;border-color:#05192D;color:#05192D;padding:8px;border:0;border-width:0;padding:6px;}.css-1jcub2v:active{-webkit-transform:perspective(1px) scale(0.975);-moz-transform:perspective(1px) scale(0.975);-ms-transform:perspective(1px) scale(0.975);transform:perspective(1px) scale(0.975);}.css-1jcub2v:disabled,.css-1jcub2v:hover:disabled,.css-1jcub2v:active:disabled{-webkit-transform:none;-moz-transform:none;-ms-transform:none;transform:none;}.css-1jcub2v:focus{outline:0;}.css-1jcub2v:hover{background-color:rgba(5, 25, 45, 0.15);border-color:#05192D;color:#05192D;}</style><a aria-label="landing" class="css-1jcub2v" href="https://www.datacamp.com" data-cy="header-logo" data-testid="alpa-navbar-logo"><svg height="28" viewbox="0 0 173 36" width="134.55555555555554" aria-hidden="true" color="currentColor" title=""><g fill="none" fill-rule="evenodd"><path d="M42.56 27.1a5.694 5.694 0 110-11.39 5.694 5.694 0 010 11.39m5.704-20.623v8.853a8.334 8.334 0 100 12.148v1.836h2.632V6.477h-2.632zm73.28 20.622a5.694 5.694 0 110-11.389 5.694 5.694 0 010 11.39m8.333-5.695v-8.247h-2.63v2.172a8.334 8.334 0 100 12.148v1.836h2.631v-7.91h-.001zm20.987-7.634a1.296 1.296 0 011.109-.622h.507c1.075 0 1.947.872 1.947 1.947v14.218h-2.686V17.269c-1.239 2-5.674 9.25-7.003 11.424a1.296 1.296 0 01-1.108.62h-.548a1.298 1.298 0 01-1.298-1.297V17.238a1909.582 1909.582 0 00-7.31 11.954l-.074.122h-2.574v-16.16h2.684v.033l-.062 11.147 6.438-10.56a1.3 1.3 0 011.11-.622h.51c1.073 0 1.944.869 1.947 1.942 0 2.972.014 8.383.014 9.17l6.397-10.493zm-37.92 12.541a8.331 8.331 0 11.21-9.502l-2.524 1.312a5.533 5.533 0 10-.379 6.88l2.693 1.31zm51.542.8a5.693 5.693 0 01-5.68-5.352v-.682a5.694 5.694 0 115.684 6.036m0-14.028a8.298 8.298 0 00-5.684 2.24v-2.168h-2.632V35.91h2.632v-8.4a8.333 8.333 0 105.684-14.425M75.277 15.68v9.938c0 .589.478 1.067 1.067 1.067h3.064v2.629h-3.062a3.7 3.7 0 01-3.696-3.696l-.01-9.938h-2.838v-2.56h2.838V8.702h2.635v4.428h4.672v2.55h-4.67zm12.757 11.418a5.694 5.694 0 110-11.39 5.694 5.694 0 010 11.39m5.702-13.941v2.173a8.334 8.334 0 100 12.148v1.836h2.632v-16.16l-2.632.003zM60.285 27.099a5.694 5.694 0 110-11.389 5.694 5.694 0 010 11.39m5.702-13.942v2.172a8.334 8.334 0 100 12.148v1.836h2.63v-16.16l-2.63.004z" fill="#05192D"/><path d="M11.7 8.514v8.332L2.857 21.89V3.44l8.841 5.074zm2.86 17.507v-7.51l11.84-6.757-2.88-1.65-8.96 5.112V7.68a1.44 1.44 0 00-.718-1.242L3.056.256A2.066 2.066 0 000 2.07v21.184a2.067 2.067 0 002.971 1.866l.082-.042 8.64-4.932v6.72c.002.513.276.987.721 1.243L23.502 34.4l2.88-1.651L14.56 26.02z" fill="#05192D"/></g></svg></a></div><style data-emotion="css 1f915o0">.css-1f915o0{-webkit-box-pack:'initial';-ms-flex-pack:'initial';-webkit-justify-content:'initial';justify-content:'initial';}</style><div class="css-1f915o0"><div class="dc-nav-course__container"><style data-emotion="css 1nxd4b6">.css-1nxd4b6{border:0;height:36px;-webkit-box-pack:initial;-ms-flex-pack:initial;-webkit-justify-content:initial;justify-content:initial;}</style><nav class="dc-nav-course css-1nxd4b6"><style data-emotion="css ftus1d">.css-ftus1d{z-index:1;border-width:2px;border-radius:4px 0px 0px 4px;}</style><style data-emotion="css 1sdywd0">.css-1sdywd0{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border:0;border-radius:4px;border-style:solid;border-width:2px;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;position:relative;-webkit-text-decoration:none;text-decoration:none;text-transform:capitalize;-webkit-transition:0.15s;transition:0.15s;vertical-align:baseline;white-space:nowrap;background-color:transparent;border-color:#05192D;color:#05192D;padding:8px;z-index:1;border-width:2px;border-radius:4px 0px 0px 4px;}.css-1sdywd0:active{-webkit-transform:perspective(1px) scale(0.975);-moz-transform:perspective(1px) scale(0.975);-ms-transform:perspective(1px) scale(0.975);transform:perspective(1px) scale(0.975);}.css-1sdywd0:disabled,.css-1sdywd0:hover:disabled,.css-1sdywd0:active:disabled{-webkit-transform:none;-moz-transform:none;-ms-transform:none;transform:none;}.css-1sdywd0:focus{outline:0;}.css-1sdywd0:hover{background-color:rgba(5, 25, 45, 0.15);border-color:#05192D;color:#05192D;}</style><a aria-label="Go to previous exercise" class="css-1sdywd0" href="/courses/introduction-to-pyspark/manipulating-data-2?ex=9" data-cy="header-previous"><svg viewbox="0 0 18 18" aria-hidden="true" height="16" role="img" width="16"><path fill="currentColor" d="M4.42 8L16 7.998a1 1 0 010 2L4.41 10l3.285 3.296a.998.998 0 11-1.417 1.41l-4.93-4.948A.998.998 0 011.36 8.23l4.933-4.938a1 1 0 011.414 0c.39.391.39 1.025 0 1.416L4.42 7.999z" fill-rule="evenodd"/></svg></a><style data-emotion="css 96nxkt">.css-96nxkt{border-radius:0;margin:0 -2px;border-width:2px;}</style><style data-emotion="css b29ve4">.css-b29ve4{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border:0;border-radius:4px;border-style:solid;border-width:2px;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;position:relative;-webkit-text-decoration:none;text-decoration:none;text-transform:capitalize;-webkit-transition:0.15s;transition:0.15s;vertical-align:baseline;white-space:nowrap;background-color:transparent;border-color:#05192D;color:#05192D;padding:0 15px;border-radius:0;margin:0 -2px;border-width:2px;}.css-b29ve4:active{-webkit-transform:perspective(1px) scale(0.975);-moz-transform:perspective(1px) scale(0.975);-ms-transform:perspective(1px) scale(0.975);transform:perspective(1px) scale(0.975);}.css-b29ve4:disabled,.css-b29ve4:hover:disabled,.css-b29ve4:active:disabled{-webkit-transform:none;-moz-transform:none;-ms-transform:none;transform:none;}.css-b29ve4:focus{outline:0;}.css-b29ve4:hover{background-color:rgba(5, 25, 45, 0.15);border-color:#05192D;color:#05192D;}</style><button class="css-b29ve4" type="button" data-cy="header-outline"><svg viewbox="0 0 18 18" aria-hidden="true" height="16" role="img" width="16"><path fill="currentColor" d="M4 6a1 1 0 110-2h10a1 1 0 010 2H4zm0 4a1 1 0 110-2h10a1 1 0 010 2H4zm0 4a1 1 0 010-2h10a1 1 0 010 2H4z" fill-rule="evenodd"/></svg><style data-emotion="css aib9ji">.css-aib9ji{font-size:14px;line-height:32px;color:#05192D;font-weight:bold;margin-left:8px;}</style><style data-emotion="css vvk465">.css-vvk465{-webkit-font-smoothing:antialiased;color:#05192D;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-style:normal;font-size:14px;font-weight:400;font-size:14px;line-height:32px;color:#05192D;font-weight:bold;margin-left:8px;}</style><span class="css-vvk465">Course Outline</span></button><style data-emotion="css q5k7z8">.css-q5k7z8{z-index:1;border-width:2px;border-radius:0px 4px 4px 0px;}</style><style data-emotion="css 11zm6tc">.css-11zm6tc{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border:0;border-radius:4px;border-style:solid;border-width:2px;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;position:relative;-webkit-text-decoration:none;text-decoration:none;text-transform:capitalize;-webkit-transition:0.15s;transition:0.15s;vertical-align:baseline;white-space:nowrap;background-color:transparent;border-color:#05192D;color:#05192D;padding:8px;z-index:1;border-width:2px;border-radius:0px 4px 4px 0px;}.css-11zm6tc:active{-webkit-transform:perspective(1px) scale(0.975);-moz-transform:perspective(1px) scale(0.975);-ms-transform:perspective(1px) scale(0.975);transform:perspective(1px) scale(0.975);}.css-11zm6tc:disabled,.css-11zm6tc:hover:disabled,.css-11zm6tc:active:disabled{-webkit-transform:none;-moz-transform:none;-ms-transform:none;transform:none;}.css-11zm6tc:focus{outline:0;}.css-11zm6tc:hover{background-color:rgba(5, 25, 45, 0.15);border-color:#05192D;color:#05192D;}</style><a aria-label="Go to next exercise" class="css-11zm6tc" href="/courses/introduction-to-pyspark/manipulating-data-2?ex=11" data-cy="header-next"><svg viewbox="0 0 18 18" aria-hidden="true" height="16" role="img" width="16"><path fill="currentColor" d="M13.58 10L2 10.002a1 1 0 010-2L13.59 8l-3.285-3.296a.998.998 0 111.417-1.41l4.93 4.948a.998.998 0 01-.012 1.527l-4.933 4.938a1 1 0 01-1.414 0 1.002 1.002 0 010-1.416l3.287-3.29z" fill-rule="evenodd"/></svg></a></nav></div></div><style data-emotion="css s01fge">.css-s01fge{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;-webkit-box-pack:end;-ms-flex-pack:end;-webkit-justify-content:flex-end;justify-content:flex-end;}</style><nav class="css-s01fge"><style data-emotion="css 1dskn3o">.css-1dskn3o{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1;-ms-flex:1;flex:1;-webkit-box-pack:end;-ms-flex-pack:end;-webkit-justify-content:flex-end;justify-content:flex-end;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}</style><nav class="css-1dskn3o"><div data-cy="header-session" class="dc-u-fx dc-u-fx-aic dc-u-mr-8"><svg viewbox="0 0 18 18" aria-hidden="false" height="16" role="img" width="16"><title>Session Ready</title><path fill="#03EF62" d="M9 18A9 9 0 119 0a9 9 0 010 18z" fill-rule="evenodd"/></svg></div><style data-emotion="css 15xw4wa">.css-15xw4wa{border:none;color:#05192D;}</style><style data-emotion="css 1rlvrrk">.css-1rlvrrk{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border:0;border-radius:4px;border-style:solid;border-width:2px;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;position:relative;-webkit-text-decoration:none;text-decoration:none;text-transform:capitalize;-webkit-transition:0.15s;transition:0.15s;vertical-align:baseline;white-space:nowrap;background-color:transparent;border-color:#05192D;color:#05192D;padding:8px;border:none;color:#05192D;}.css-1rlvrrk:active{-webkit-transform:perspective(1px) scale(0.975);-moz-transform:perspective(1px) scale(0.975);-ms-transform:perspective(1px) scale(0.975);transform:perspective(1px) scale(0.975);}.css-1rlvrrk:disabled,.css-1rlvrrk:hover:disabled,.css-1rlvrrk:active:disabled{-webkit-transform:none;-moz-transform:none;-ms-transform:none;transform:none;}.css-1rlvrrk:focus{outline:0;}.css-1rlvrrk:hover{background-color:rgba(5, 25, 45, 0.15);border-color:#05192D;color:#05192D;}</style><button aria-label="Take notes" class="css-1rlvrrk" type="button" data-cy="header-notes"><svg viewbox="0 0 18 18" aria-hidden="true" height="16" role="img" width="16"><path fill="currentColor" d="M12.056 15c0-.552.45-1 1.005-1 .555 0 1.005.448 1.005 1v2c0 .552-.45 1-1.005 1H2.005A1.002 1.002 0 011 17V1c0-.552.45-1 1.005-1h11.056c.555 0 1.005.448 1.005 1v1.002c0 .552-.45 1-1.005 1a1.002 1.002 0 01-1.005-1L3.01 2v14h9.046v-1zm3.922-7.542l-2.132-2.132.707-.707a1 1 0 011.414 0l.718.718a1 1 0 010 1.414l-.707.707zm-.707.707L8.907 14.53l-2.126-.006-.006-2.126 6.364-6.364 2.132 2.132z" fill-rule="evenodd"/></svg></button><button aria-label="Provide Feedback" class="css-1rlvrrk" type="button" data-cy="header-issue" data-test-id="header-report-issue-button"><svg viewbox="0 0 18 18" aria-hidden="true" height="16" role="img" width="16"><path fill="currentColor" d="M9 16A7 7 0 109 2a7 7 0 000 14zm0 2A9 9 0 119 0a9 9 0 010 18zm0-4a1 1 0 110-2 1 1 0 010 2zM8 5a1 1 0 112 0v5a1 1 0 01-2 0V5z" fill-rule="evenodd"/></svg></button></nav></nav></header><main class="exercise-area"><div data-cy="server-side-loader-placeholder"><aside class="exercise--sidebar" style="width:40%"><div class="exercise--sidebar-content"><div class="listview__outer"><div class="listview__inner"><div class="listview__section"><div><div role="button" class="listview__header"><div class="exercise--sidebar-header"><h5 class="dc-panel__title"><svg aria-label="exercise icon" class="dc-icon-exercise dc-u-color-navy dc-u-mr-8" fill="currentColor" height="12" role="Img" width="12"><use xlink:href="/static/media/symbols.e369b265.svg#exercise"/></svg>Exercise</h5></div></div></div><div class="listview__content"><div class="exercise--assignment exercise--typography"><h1 class="exercise--title">Grouping and Aggregating II</h1><div class><p>In addition to the <code>GroupedData</code> methods you&apos;ve already seen, there is also the <code>.agg()</code> method.
This method lets you pass an aggregate column expression that uses any of the aggregate functions from the <code>pyspark.sql.functions</code> submodule.</p>
<p>This submodule contains many useful functions for computing things like standard deviations. All the aggregation functions in this submodule take the name of a column in a <code>GroupedData</code> table.</p>
<p>Remember, a <code>SparkSession</code> called <code>spark</code> is already in your workspace, along with the Spark DataFrame <code>flights</code>. The grouped DataFrames you created in the last exercise are also in your workspace.</p></div></div></div></div><div class="listview__section" style="min-height:calc(100% - 33px)"><div><div role="button" class="listview__header"><div class="exercise--sidebar-header"><h5 class="dc-panel__title"><svg aria-label="checkmark_circle icon" class="dc-icon-checkmark_circle dc-u-color-navy dc-u-mr-8" fill="currentColor" height="12" role="Img" width="12"><use xlink:href="/static/media/symbols.e369b265.svg#checkmark_circle"/></svg>Instructions</h5><style data-emotion="css 6996zu">.css-6996zu{border-radius:4px;display:inline-block;text-transform:uppercase;background-color:#FCCE0D;color:#05192D;font-size:12px;line-height:18px;padding-left:4px;padding-right:4px;}</style><style data-emotion="css 1o8nzjk">.css-1o8nzjk{-webkit-font-smoothing:antialiased;color:#05192D;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-style:normal;font-weight:800;line-height:1.5;border-radius:4px;display:inline-block;text-transform:uppercase;background-color:#FCCE0D;color:#05192D;font-size:12px;line-height:18px;padding-left:4px;padding-right:4px;}</style><strong class="css-1o8nzjk">100 XP</strong></div></div></div><div class="listview__content"><div><div class><div class="exercise--instructions exercise--typography"><div class="exercise--instructions__content"><ul>
<li>Import the submodule <code>pyspark.sql.functions</code> as <code>F</code>.</li>
<li>Create a <code>GroupedData</code> table called <code>by_month_dest</code> that&apos;s grouped by both the <code>month</code> and <code>dest</code> columns. Refer to the two columns by passing both strings as separate arguments.</li>
<li>Use the <code>.avg()</code> method on the <code>by_month_dest</code> DataFrame to get the average <code>dep_delay</code> in each month for each destination.</li>
<li>Find the standard deviation of <code>dep_delay</code> by using the <code>.agg()</code> method with the function <code>F.stddev()</code>.</li>
</ul></div><div style="margin:16px -15px 0"><section class="dc-sct-feedback" tabindex="-1"><div></div><nav class="dc-sct-feedback__nav"><style data-emotion="css 6is1tf">.css-6is1tf{padding-left:16px;}</style><div class="css-6is1tf"><style data-emotion="css 12j1yck">.css-12j1yck{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border:0;border-radius:4px;border-style:solid;border-width:2px;cursor:pointer;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;position:relative;-webkit-text-decoration:none;text-decoration:none;text-transform:capitalize;-webkit-transition:0.15s;transition:0.15s;vertical-align:baseline;white-space:nowrap;background-color:transparent;border-color:#05192D;color:#05192D;padding:0 15px;}.css-12j1yck:active{-webkit-transform:perspective(1px) scale(0.975);-moz-transform:perspective(1px) scale(0.975);-ms-transform:perspective(1px) scale(0.975);transform:perspective(1px) scale(0.975);}.css-12j1yck:disabled,.css-12j1yck:hover:disabled,.css-12j1yck:active:disabled{-webkit-transform:none;-moz-transform:none;-ms-transform:none;transform:none;}.css-12j1yck:focus{outline:0;}.css-12j1yck:hover{background-color:rgba(5, 25, 45, 0.15);border-color:#05192D;color:#05192D;}</style><button class="css-12j1yck" type="button" data-cy="exercise-show-hint"><svg viewbox="0 0 18 18" aria-hidden="true" height="16" role="img" width="16"><path fill="currentColor" d="M9 0a7 7 0 014.95 11.95l-.001-.001c-.794.795-.949 1.1-.949 2.051a1 1 0 01-2 0c0-1.548.396-2.325 1.535-3.467l.04-.037a5 5 0 10-7.11.037C6.605 11.675 7 12.453 7 14a1 1 0 01-2 0c0-.951-.155-1.256-.949-2.051A7 7 0 019 0zm0 7a1 1 0 011 1v6a1 1 0 01-2 0V8a1 1 0 011-1zm0 11c-1.657 0-3-.895-3-2h6c0 1.105-1.343 2-3 2z" fill-rule="evenodd"/></svg><style data-emotion="css aib9ji">.css-aib9ji{font-size:14px;line-height:32px;color:#05192D;font-weight:bold;margin-left:8px;}</style><style data-emotion="css vvk465">.css-vvk465{-webkit-font-smoothing:antialiased;color:#05192D;font-family:Studio-Feixen-Sans,Arial,sans-serif;font-style:normal;font-size:14px;font-weight:400;font-size:14px;line-height:32px;color:#05192D;font-weight:bold;margin-left:8px;}</style><span class="css-vvk465">Take Hint (-30 XP)</span></button></div></nav></section></div></div></div></div></div></div></div></div></div></aside><section class="exercise--content" style="width:60%"><div class="exercise-waiting"><div class="global-spinner dc-u-fx-jcc dc-u-fx"><style data-emotion="css 1f2mbny">.css-1f2mbny{height:70px;width:70px;}</style><div class="css-1f2mbny"><style data-emotion="css 1idrum8">.css-1idrum8{-webkit-animation:animation-1pv1bkr cubic-bezier(0.65, 0, 0.55, 1) 2s infinite alternate;animation:animation-1pv1bkr cubic-bezier(0.65, 0, 0.55, 1) 2s infinite alternate;margin:auto;width:76.65%;will-change:clip-path;}@-webkit-keyframes animation-1pv1bkr{0%,6%{-webkit-clip-path:polygon(0% -12%, 0% -12%, 169% 63%, 169% 63%);clip-path:polygon(0% -12%, 0% -12%, 169% 63%, 169% 63%);}100%{-webkit-clip-path:polygon(0% -12%, 0% 308%, 169% 383%, 169% 63%);clip-path:polygon(0% -12%, 0% 308%, 169% 383%, 169% 63%);}}@keyframes animation-1pv1bkr{0%,6%{-webkit-clip-path:polygon(0% -12%, 0% -12%, 169% 63%, 169% 63%);clip-path:polygon(0% -12%, 0% -12%, 169% 63%, 169% 63%);}100%{-webkit-clip-path:polygon(0% -12%, 0% 308%, 169% 383%, 169% 63%);clip-path:polygon(0% -12%, 0% 308%, 169% 383%, 169% 63%);}}</style><div class="css-1idrum8"><style data-emotion="css 1j8nxo animation-1h2cwi2">.css-1j8nxo{-webkit-animation:animation-1h2cwi2 cubic-bezier(0, 0, 0.85, 1) 2s infinite alternate;animation:animation-1h2cwi2 cubic-bezier(0, 0, 0.85, 1) 2s infinite alternate;will-change:clip-path;}@-webkit-keyframes animation-1h2cwi2{0%,71%{-webkit-clip-path:polygon(0% 0%, 0% 78.5%, 100% 34.5%, 100% -44%);clip-path:polygon(0% 0%, 0% 78.5%, 100% 34.5%, 100% -44%);}96%,100%{-webkit-clip-path:polygon(0% 0%, 0% 140%, 100% 96%, 100% -44%);clip-path:polygon(0% 0%, 0% 140%, 100% 96%, 100% -44%);}}@keyframes animation-1h2cwi2{0%,71%{-webkit-clip-path:polygon(0% 0%, 0% 78.5%, 100% 34.5%, 100% -44%);clip-path:polygon(0% 0%, 0% 78.5%, 100% 34.5%, 100% -44%);}96%,100%{-webkit-clip-path:polygon(0% 0%, 0% 140%, 100% 96%, 100% -44%);clip-path:polygon(0% 0%, 0% 140%, 100% 96%, 100% -44%);}}</style><div class="css-1j8nxo"><style data-emotion="css 5h5b50">.css-5h5b50{-webkit-clip-path:polygon(-0.1% -10%, 169% 65%, -0.1% 139%);clip-path:polygon(-0.1% -10%, 169% 65%, -0.1% 139%);}</style><div class="css-5h5b50"><style data-emotion="css 4zleql">.css-4zleql{display:block;}</style><svg version="1.1" viewbox="0 0 2640 3444" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="css-4zleql"><title>Loading</title><style data-emotion="css jy99qt animation-co7x2c">.css-jy99qt{-webkit-animation:animation-co7x2c cubic-bezier(0.65, 0, 0.55, 1) 2s infinite alternate;animation:animation-co7x2c cubic-bezier(0.65, 0, 0.55, 1) 2s infinite alternate;stroke-dasharray:9800;stroke-dashoffset:9800;will-change:stroke-dashoffset;}@-webkit-keyframes animation-co7x2c{100%{stroke-dashoffset:0;}}@keyframes animation-co7x2c{100%{stroke-dashoffset:0;}}</style><path d="M0 0 M2569 1056L143 2447V149l1175 673v1867l1248 715" fill="none" stroke="#05192d" stroke-linejoin="round" stroke-width="300" class="css-jy99qt"/></svg></div></div></div></div></div><noscript></noscript></div></section></div><style data-emotion="css dhfy3a 7y8jxc 14w24v3 1yuhvjn">.css-dhfy3a{-webkit-animation-name:animation-2ijyvo;animation-name:animation-2ijyvo;-webkit-animation-timing-function:cubic-bezier(0.23, 1, 0.32, 1);animation-timing-function:cubic-bezier(0.23, 1, 0.32, 1);}@-webkit-keyframes animation-2ijyvo{50%{opacity:1;}from{opacity:0;-webkit-transform:scale3d(0.3, 0.3, 0.3);-moz-transform:scale3d(0.3, 0.3, 0.3);-ms-transform:scale3d(0.3, 0.3, 0.3);transform:scale3d(0.3, 0.3, 0.3);}}@keyframes animation-2ijyvo{50%{opacity:1;}from{opacity:0;-webkit-transform:scale3d(0.3, 0.3, 0.3);-moz-transform:scale3d(0.3, 0.3, 0.3);-ms-transform:scale3d(0.3, 0.3, 0.3);transform:scale3d(0.3, 0.3, 0.3);}}.css-7y8jxc{-webkit-animation-name:animation-1phn0oq;animation-name:animation-1phn0oq;-webkit-animation-timing-function:cubic-bezier(0.755, 0.05, 0.855, 0.06);animation-timing-function:cubic-bezier(0.755, 0.05, 0.855, 0.06);}@-webkit-keyframes animation-1phn0oq{50%{opacity:0;-webkit-transform:scale3d(0.3, 0.3, 0.3);-moz-transform:scale3d(0.3, 0.3, 0.3);-ms-transform:scale3d(0.3, 0.3, 0.3);transform:scale3d(0.3, 0.3, 0.3);}from{opacity:1;}to{opacity:0;}}@keyframes animation-1phn0oq{50%{opacity:0;-webkit-transform:scale3d(0.3, 0.3, 0.3);-moz-transform:scale3d(0.3, 0.3, 0.3);-ms-transform:scale3d(0.3, 0.3, 0.3);transform:scale3d(0.3, 0.3, 0.3);}from{opacity:1;}to{opacity:0;}}.css-14w24v3{left:50%;position:fixed;top:0;-webkit-transform:translateX(-50%);-moz-transform:translateX(-50%);-ms-transform:translateX(-50%);transform:translateX(-50%);z-index:999;}.css-14w24v3 .Toastify__progress-bar{-webkit-animation:animation-qqoh2i linear 1;animation:animation-qqoh2i linear 1;}@-webkit-keyframes animation-qqoh2i{0%{-webkit-transform:scaleX(1);-moz-transform:scaleX(1);-ms-transform:scaleX(1);transform:scaleX(1);}100%{-webkit-transform:scaleX(0);-moz-transform:scaleX(0);-ms-transform:scaleX(0);transform:scaleX(0);}}@keyframes animation-qqoh2i{0%{-webkit-transform:scaleX(1);-moz-transform:scaleX(1);-ms-transform:scaleX(1);transform:scaleX(1);}100%{-webkit-transform:scaleX(0);-moz-transform:scaleX(0);-ms-transform:scaleX(0);transform:scaleX(0);}}.css-1yuhvjn{margin-top:16px;}</style><div class="Toastify"></div></main><div class="exercise-footer"><ul data-cy="progress-container" class="dc-progress-indicator"><li class="dc-progress-indicator__item"><a href="javascript:void(0)" class="dc-progress-indicator__bar"><div class="dc-progress-indicator__fill" style="width:0%"></div></a></li><li class="dc-progress-indicator__item"><a href="javascript:void(0)" class="dc-progress-indicator__bar"><div class="dc-progress-indicator__fill" style="width:0%"></div></a></li><li class="dc-progress-indicator__item"><a href="javascript:void(0)" class="dc-progress-indicator__bar"><div class="dc-progress-indicator__fill" style="width:0%"></div></a></li><li class="dc-progress-indicator__item"><a href="javascript:void(0)" class="dc-progress-indicator__bar"><div class="dc-progress-indicator__fill" style="width:0%"></div></a></li></ul></div><style data-emotion="css zs9gal 13qqqtf 728dx5 1d9ftqx atcdtd 728dx5 d3v9zr">.css-zs9gal{opacity:1!important;-webkit-transform:none!important;-moz-transform:none!important;-ms-transform:none!important;transform:none!important;}.css-13qqqtf{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;min-width:0;opacity:0;outline:none;position:relative;-webkit-transform:scale(0.5);-moz-transform:scale(0.5);-ms-transform:scale(0.5);transform:scale(0.5);-webkit-transition:0.4s cubic-bezier(0.19, 1, 0.22, 1);transition:0.4s cubic-bezier(0.19, 1, 0.22, 1);box-sizing:border-box;max-height:100%;padding:8px;width:496px;}.css-728dx5{opacity:0!important;}.css-1d9ftqx{opacity:1!important;}.css-atcdtd{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:rgba(5, 25, 45, 0.8);bottom:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;left:0;opacity:0;position:fixed;right:0;top:0;-webkit-transition:opacity 0.6s cubic-bezier(0.19, 1, 0.22, 1);transition:opacity 0.6s cubic-bezier(0.19, 1, 0.22, 1);z-index:900;}.css-d3v9zr{overflow:hidden;}</style></div></div><script>window.MathJax={options:{ignoreHtmlClass:"tex2jax_ignore",processHtmlClass:"tex2jax_process"},tex:{autoload:{color:[],colorV2:["color"]},packages:{"[+]":["noerrors"]}},loader:{load:["[tex]/noerrors"]}}</script><script src="/campus/mathjax@3/es5/tex-chtml.js" id="MathJax-script"></script><script>!function(e){function t(t){for(var n,o,f=t[0],u=t[1],d=t[2],i=0,s=[];i<f.length;i++)o=f[i],Object.prototype.hasOwnProperty.call(c,o)&&c[o]&&s.push(c[o][0]),c[o]=0;for(n in u)Object.prototype.hasOwnProperty.call(u,n)&&(e[n]=u[n]);for(l&&l(t);s.length;)s.shift()();return a.push.apply(a,d||[]),r()}function r(){for(var e,t=0;t<a.length;t++){for(var r=a[t],n=!0,o=1;o<r.length;o++){var u=r[o];0!==c[u]&&(n=!1)}n&&(a.splice(t--,1),e=f(f.s=r[0]))}return e}var n={},o={14:0},c={14:0},a=[];function f(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,f),r.l=!0,r.exports}f.e=function(e){var t=[];o[e]?t.push(o[e]):0!==o[e]&&{1:1,2:1,5:1,8:1,9:1,10:1,13:1,17:1,18:1,20:1,21:1}[e]&&t.push(o[e]=new Promise((function(t,r){for(var n="static/css/"+({7:"console-monaco",8:"dnde",9:"ee",10:"idee",12:"monaco",13:"rde",15:"xterm"}[e]||e)+"."+{0:"31d6cfe0",1:"e8c7adfe",2:"4d201c8f",3:"31d6cfe0",4:"31d6cfe0",5:"a014e8d0",6:"31d6cfe0",7:"31d6cfe0",8:"b5d0672e",9:"2bf50755",10:"f128b9fc",12:"31d6cfe0",13:"2299b9ab",15:"31d6cfe0",17:"4846b048",18:"3d94959c",19:"31d6cfe0",20:"8f55c4a5",21:"e16192f0",22:"31d6cfe0",23:"31d6cfe0",24:"31d6cfe0",25:"31d6cfe0",26:"31d6cfe0",27:"31d6cfe0",28:"31d6cfe0"}[e]+".chunk.css",c=f.p+n,a=document.getElementsByTagName("link"),u=0;u<a.length;u++){var d=(l=a[u]).getAttribute("data-href")||l.getAttribute("href");if("stylesheet"===l.rel&&(d===n||d===c))return t()}var i=document.getElementsByTagName("style");for(u=0;u<i.length;u++){var l;if((d=(l=i[u]).getAttribute("data-href"))===n||d===c)return t()}var s=document.createElement("link");s.rel="stylesheet",s.type="text/css",s.onload=t,s.onerror=function(t){var n=t&&t.target&&t.target.src||c,a=new Error("Loading CSS chunk "+e+" failed.\n("+n+")");a.code="CSS_CHUNK_LOAD_FAILED",a.request=n,delete o[e],s.parentNode.removeChild(s),r(a)},s.href=c,document.getElementsByTagName("head")[0].appendChild(s)})).then((function(){o[e]=0})));var r=c[e];if(0!==r)if(r)t.push(r[2]);else{var n=new Promise((function(t,n){r=c[e]=[t,n]}));t.push(r[2]=n);var a,u=document.createElement("script");u.charset="utf-8",u.timeout=120,f.nc&&u.setAttribute("nonce",f.nc),u.src=function(e){return f.p+"static/js/"+({7:"console-monaco",8:"dnde",9:"ee",10:"idee",12:"monaco",13:"rde",15:"xterm"}[e]||e)+"."+{0:"2290f04d",1:"a8c33678",2:"2355228d",3:"c68c5c6d",4:"7a465327",5:"0453f10d",6:"108f53f4",7:"7d648b51",8:"55739fe9",9:"05a5c22b",10:"610fb580",12:"27f8ab32",13:"57bccf6b",15:"2524226b",17:"40b1b030",18:"29ede238",19:"42028e55",20:"07dd42ed",21:"a4274e09",22:"b6509a3b",23:"05165bd4",24:"f12263c1",25:"bb0c113d",26:"968ef114",27:"f93925b3",28:"b6b5e50b"}[e]+".chunk.js"}(e);var d=new Error;a=function(t){u.onerror=u.onload=null,clearTimeout(i);var r=c[e];if(0!==r){if(r){var n=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src;d.message="Loading chunk "+e+" failed.\n("+n+": "+o+")",d.name="ChunkLoadError",d.type=n,d.request=o,r[1](d)}c[e]=void 0}};var i=setTimeout((function(){a({type:"timeout",target:u})}),12e4);u.onerror=u.onload=a,document.head.appendChild(u)}return Promise.all(t)},f.m=e,f.c=n,f.d=function(e,t,r){f.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},f.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},f.t=function(e,t){if(1&t&&(e=f(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(f.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)f.d(r,n,function(t){return e[t]}.bind(null,n));return r},f.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return f.d(t,"a",t),t},f.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},f.p="/campus/",f.oe=function(e){throw console.error(e),e};var u=this["webpackJsonpcampus-app-v2"]=this["webpackJsonpcampus-app-v2"]||[],d=u.push.bind(u);u.push=t,u=u.slice();for(var i=0;i<u.length;i++)t(u[i]);var l=d;r()}([])</script><script src="/campus/static/js/16.d294fff6.chunk.js"></script><script src="/campus/static/js/main.12a4ee0a.chunk.js"></script><script>(function(){var js = "window['__CF$cv$params']={r:'7890c676dedc0219',m:'XuT9g2gBXtg7tb0nMrc3cx_bjogocQXvrj.mgriZ6_w-1673640626-0-AZ50cZTsLZ1parDBT1M4BJTuqcgpt5ePIAXEx6arg633gYWxwml4PO5apMGINCA/mxxFFVgWs1FCAJ615gcLZeFyaq7vwplisqcxItJ5qr6z2v0eL1SJdz9udo9Cv/fdrKh1D3AiVzoBiYyPCRZMewNQoYRvqxahbl1B9mqmK2gfNJ/Ex8HyYmBFZL07QEkkwg==',s:[0x98c8b29b1f,0x096df4babd],u:'/cdn-cgi/challenge-platform/h/g'};var now=Date.now()/1000,offset=14400,ts=''+(Math.floor(now)-Math.floor(now%offset)),_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/h/g/scripts/alpha/invisible.js?ts='+ts,document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.nonce = '';_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script></body></html>